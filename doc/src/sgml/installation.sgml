<!-- doc/src/sgml/installation.sgml -->
<!--

Use </link> not just </> so INSTALL.html can be created without links
to the main documentation.  Don't use <xref>.

-->

<chapter id="installation">




 <title><![%standalone-include[<productname>Postgres-XC</>]]>

  Installation from Source Code</title>

 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>














&xconly;
 <para>
  This <![%standalone-include;[document]]>
  <![%standalone-ignore;[chapter]]> describes the installation of
  <productname>Postgres-XC</productname> using the source code
  distribution.  (If you are installing a pre-packaged distribution,
  such as an RPM or Debian package, ignore this
  <![%standalone-include;[document]]>
  <![%standalone-ignore;[chapter]]>
  and read the packager's instructions instead.)
 </para>


 <sect1 id="install-short">
  <title>Short Version</title>




















  <para>
    The following short installation allows to install a simple cluster on a local machine with
    1 Coordinator, 2 Datanodes and 1 GTM. When installing a more complex cluster, you might
    change the number of Coordinators and Datanodes, and might have to start nodes on different
    servers.
  </para>
<synopsis>
./configure
gmake
su
gmake install
adduser gaussdb
mkdir /usr/local/pgsql/data_coord1
mkdir /usr/local/pgsql/data_datanode1
mkdir /usr/local/pgsql/data_datanode2
mkdir /usr/local/pgsql/data_gtm
chown gaussdb /usr/local/pgsql/data_coord1
chown gaussdb /usr/local/pgsql/data_datanode1
chown gaussdb /usr/local/pgsql/data_datanode2
chown gaussdb /usr/local/pgsql/data_gtm
su - gaussdb
/usr/local/pgsql/bin/gs_initdb -D /usr/local/pgsql/data_coord1 --nodename coord1
/usr/local/pgsql/bin/gs_initdb -D /usr/local/pgsql/data_datanode1 --nodename datanode1
/usr/local/pgsql/bin/gs_initdb -D /usr/local/pgsql/data_datanode2 --nodename datanode2
/usr/local/pgsql/bin/gs_initgtm -D /usr/local/pgsql/data_gtm -Z gs_gtm
/usr/local/pgsql/bin/gs_gtm -D /usr/local/pgsql/data_gtm &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/gaussdb --datanode -p 15432 -D /usr/local/pgsql/data_datanode1 &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/gaussdb --datanode -p 15433 -D /usr/local/pgsql/data_datanode2 &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/gaussdb --coordinator -D /usr/local/pgsql/data_coord1 &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/gsql -c "CREATE NODE datanode1 WITH (TYPE = 'datanode', PORT = 15432)" gaussdb
/usr/local/pgsql/bin/gsql -c "CREATE NODE datanode2 WITH (TYPE = 'datanode', PORT = 15433)" gaussdb
/usr/local/pgsql/bin/gsql -c "SELECT pgxc_pool_reload()" gaussdb
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/gsql test
</synopsis>

<para>

   The long version is the rest of this
   <![%standalone-include;[document.]]>
   <![%standalone-ignore;[chapter.]]>
  </para>
 </sect1>


 <sect1 id="install-requirements">
  <title>Requirements</title>













&xconly;
  <para>
   In general, a Linux-Unix platform should be able to run <productname>Postgres-XC</>.
  </para>


  <para>
   The following software packages are required for building




   <productname>Postgres-XC</>:


   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

      <acronym>GNU</> <application>make</> version 3.80 or newer is required; other
      <application>make</> programs or older <acronym>GNU</> <application>make</> versions will <emphasis>not</> work.
      <acronym>GNU</> <application>make</> is often installed under
      the name <filename>gmake</filename>; this document will always
      refer to it by that name. (On some systems
      <acronym>GNU</acronym> <application>make</> is the default tool with the name
      <filename>make</>.) To test for <acronym>GNU</acronym>
      <application>make</application> enter:
<screen>
<userinput>gmake --version</userinput>
</screen>
     </para>
    </listitem>

    <listitem>
     <para>
      You need an <acronym>ISO</>/<acronym>ANSI</> C compiler (at least
      C89-compliant). Recent
      versions of <productname>GCC</> are recommended, but




      <productname>Postgre-XC</> is known to build using a wide variety

      of compilers from different vendors.
     </para>
    </listitem>

    <listitem>
     <para>
      <application>tar</> is required to unpack the source
      distribution, in addition to either
      <application>gzip</> or <application>bzip2</>.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>






















      The <acronym>GNU</> <productname>Readline</> library is used by
      default.  It allows <application>gsql</application> (the
      Postgres-XC command line SQL interpreter) to remember each
      command you type, and allows you to use arrow keys to recall and
      edit previous commands.  This is very helpful and is strongly
      recommended.  If you don't want to use it then you must specify
      the <option>--without-readline</option> option to
      <filename>configure</>. As an alternative, you can often use the
      BSD-licensed <filename>libedit</filename> library, originally
      developed on <productname>NetBSD</productname>. The
      <filename>libedit</filename> library is
      GNU <productname>Readline</productname>-compatible and is used if
      <filename>libreadline</filename> is not found, or if
      <option>--with-libedit-preferred</option> is used as an
      option to <filename>configure</>. If you are using a package-based
      Linux distribution, be aware that you need both the
      <literal>readline</> and <literal>readline-devel</> packages, if
      those are separate in your distribution.

     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

      The <productname>zlib</productname> compression library is
      used by default. If you don't want to use it then you must
      specify the <option>--without-zlib</option> option to
      <filename>configure</filename>. Using this option disables
      support for compressed archives in <application>gs_dump</> and
      <application>pg_restore</>.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   The following packages are optional.  They are not required in the
   default configuration, but they are needed when certain build
   options are enabled, as explained below:

   <itemizedlist>
    <listitem>
     <para>
      To build the server programming language
      <application>PL/Perl</application> you need a full
      <productname>Perl</productname> installation, including the
      <filename>libperl</filename> library and the header files.
      Since <application>PL/Perl</application> will be a shared
      library, the <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename> library must be a shared library
      also on most platforms.  This appears to be the default in
      recent <productname>Perl</productname> versions, but it was not
      in earlier versions, and in any case it is the choice of whomever
      installed Perl at your site.
      If you intend to make more than incidental use of
      <application>PL/Perl</application>, you should ensure that the
      <productname>Perl</productname> installation was built with the
      <literal>usemultiplicity</> option enabled (<literal>perl -V</>
      will show whether this is the case).
     </para>

     <para>






      If you don't have the shared library but you need one, a message
      like this will appear during the <productname>Postgres-XC</>
      build to point out this fact:


<screen>
*** Cannot build PL/Perl because libperl is not a shared library.
*** You might have to rebuild your Perl installation.  Refer to
*** the documentation for details.
</screen>
      (If you don't follow the on-screen output you will merely notice
      that the <application>PL/Perl</application> library object,
      <filename>plperl.so</filename> or similar, will not be
      installed.)  If you see this, you will have to rebuild and
      install <productname>Perl</productname> manually to be able to
      build <application>PL/Perl</application>.  During the
      configuration process for <productname>Perl</productname>,
      request a shared library.
     </para>
    </listitem>

    <listitem>
     <para>
      To build the <application>PL/Python</> server programming
      language, you need a <productname>Python</productname>
      installation with the header files and
      the <application>distutils</application> module.  The minimum
      required version is <productname>Python</productname>
      2.2.  <productname>Python 3</productname> is supported if it's
      version 3.1 or later; but see
      <![%standalone-include[the <application>PL/Python</> documentation]]>
      <![%standalone-ignore[<xref linkend="plpython-python23">]]>
      when using Python 3.
     </para>

     <para>
      Since <application>PL/Python</application> will be a shared
      library, the <indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename> library must be a shared library
      also on most platforms.  This is not the case in a default
      <productname>Python</productname> installation.  If after
      building and installing <productname>PostgreSQL</> you have a file called
      <filename>plpython.so</filename> (possibly a different
      extension), then everything went well.  Otherwise you should
      have seen a notice like this flying by:
<screen>
*** Cannot build PL/Python because libpython is not a shared library.
*** You might have to rebuild your Python installation.  Refer to
*** the documentation for details.
</screen>
      That means you have to rebuild (part of) your
      <productname>Python</productname> installation to create this
      shared library.
     </para>

     <para>









      If you have problems, run <productname>Python</> 2.3 or later's
      configure using the <literal>--enable-shared</> flag.  On some
      operating systems you don't have to build a shared library, but
      you will have to convince the <productname>Postgres-XC</> build
      system of this.  Consult the <filename>Makefile</filename> in
      the <filename>src/pl/plpython</filename> directory for details.


     </para>
    </listitem>

    <listitem>
     <para>
      To build the <application>PL/Tcl</application>
      procedural language, you of course need a <productname>Tcl</>
      installation.  If you are using a pre-8.4 release of
      <productname>Tcl</>, ensure that it was built without multithreading
      support.
     </para>
    </listitem>

    <listitem>
     <para>
      To enable Native Language Support (<acronym>NLS</acronym>), that
      is, the ability to display a program's messages in a language
      other than English, you need an implementation of the
      <application>Gettext</> <acronym>API</acronym>.  Some operating
      systems have this built-in (e.g., <systemitem
      class="osname">Linux</>, <systemitem class="osname">NetBSD</>,
      <systemitem class="osname">Solaris</>), for other systems you
      can download an add-on package from <ulink
      url="http://www.gnu.org/software/gettext/"></ulink>.
      If you are using the <application>Gettext</> implementation in
      the <acronym>GNU</acronym> C library then you will additionally
      need the <productname>GNU Gettext</productname> package for some
      utility programs.  For any of the other implementations you will
      not need it.
     </para>
    </listitem>

    <listitem>
     <para>
      You need <application>Kerberos</>, <productname>OpenSSL</>,
      <productname>OpenLDAP</>, and/or
      <application>PAM</>, if you want to support authentication or
      encryption using those services.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   If you are building from a <productname>Git</productname> tree instead of
   using a released source package, or if you want to do server development,
   you also need the following packages:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

      GNU <application>Flex</> and <application>Bison</>
      are needed to build from a Git checkout, or if you changed the actual
      scanner and parser definition files. If you need them, be sure
      to get <application>Flex</> 2.5.31 or later and
      <application>Bison</> 1.875 or later. Other <application>lex</>
      and <application>yacc</> programs cannot be used.
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

      <application>Perl</> 5.8 or later is needed to build from a Git checkout,
      or if you changed the input files for any of the build steps that
      use Perl scripts.  If building on Windows you will need
      <application>Perl</> in any case.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   If you need to get a <acronym>GNU</acronym> package, you can find
   it at your local <acronym>GNU</acronym> mirror site (see <ulink
   url="http://www.gnu.org/order/ftp.html"></>
   for a list) or at <ulink
   url="ftp://ftp.gnu.org/gnu/"></ulink>.
  </para>

  <para>
   Also check that you have sufficient disk space. You will need about
   100 MB for the source tree during compilation and about 20 MB for
   the installation directory. An empty database cluster takes about
   35 MB; databases take about five times the amount of space that a
   flat text file with the same data would take. If you are going to
   run the regression tests you will temporarily need up to an extra
   150 MB. Use the <command>df</command> command to check free disk
   space.
  </para>
 </sect1>

<![%standalone-ignore;[
 <sect1 id="install-getsource">
  <title>Getting The Source</title>





















&xconly;
  <para>
   The <productname>Postgres-XC</> &version; sources can be obtained from
   its <ulink url="http://postgres-xc.sourceforge.net/">Web site</ulink> or 
   <ulink url="http://sourceforge.net/projects/postgres-xc/">development site</ulink>.
   After you have obtained the file, unpack it:
<screen>
<userinput>gunzip pgxc-v&version;.tar.gz</userinput>
<userinput>tar xf pgxc-v&version;.tar</userinput>
</screen>
   This will create a directory
   <filename>pgxc</filename> under the current directory
   with the <productname>Postgres-XC</> sources.
   Change into that directory for the rest
   of the installation procedure.
  </para>


  <para>
   You can also get the source directly from the version control repository, see
   <xref linkend="sourcerepo">.
  </para>
 </sect1>
]]>

 <sect1 id="install-procedure">
  <title>Installation Procedure</title>

&xconly;
  <procedure>

  <step id="configure">
   <title>Configuration</title>

   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>

   <para>
    The first step of the installation procedure is to configure the
    source tree for your system and choose the options you would like.
    This is done by running the <filename>configure</> script. For a
    default installation simply enter:
<screen>
<userinput>./configure</userinput>
</screen>
    This script will run a number of tests to determine values for various
    system dependent variables and detect any quirks of your
    operating system, and finally will create several files in the
    build tree to record what it found.  You can also run
    <filename>configure</filename> in a directory outside the source
    tree, if you want to keep the build directory separate.  This
    procedure is also called a
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    build.  Here's how:
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<userinput>/path/to/source/tree/configure [options go here]</userinput>
<userinput>gmake</userinput>
</screen>
   </para>

   <para>
    The default configuration will build the server and utilities, as
    well as all client applications and interfaces that require only a
    C compiler. All files will be installed under
    <filename>/usr/local/pgsql</> by default.
   </para>

   <para>
    You can customize the build and installation process by supplying one
    or more of the following command line options to
    <filename>configure</filename>:

     <variablelist>
      <varlistentry>
       <term><option>--prefix=<replaceable>PREFIX</></option></term>
       <listitem>
        <para>
         Install all files under the directory <replaceable>PREFIX</>
         instead of <filename>/usr/local/pgsql</filename>. The actual
         files will be installed into various subdirectories; no files
         will ever be installed directly into the
         <replaceable>PREFIX</> directory.
        </para>

        <para>
         If you have special needs, you can also customize the
         individual subdirectories with the following options. However,
         if you leave these with their defaults, the installation will be
         relocatable, meaning you can move the directory after
         installation. (The <literal>man</> and <literal>doc</>
         locations are not affected by this.)
        </para>

        <para>
         For relocatable installs, you might want to use
         <filename>configure</filename>'s <literal>--disable-rpath</>
         option.  Also, you will need to tell the operating system how
         to find the shared libraries.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--exec-prefix=<replaceable>EXEC-PREFIX</></option></term>
       <listitem>
        <para>
         You can install architecture-dependent files under a
         different prefix, <replaceable>EXEC-PREFIX</>, than what
         <replaceable>PREFIX</> was set to. This can be useful to
         share architecture-independent files between hosts. If you
         omit this, then <replaceable>EXEC-PREFIX</> is set equal to
         <replaceable>PREFIX</> and both architecture-dependent and
         independent files will be installed under the same tree,
         which is probably what you want.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--bindir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Specifies the directory for executable programs. The default
         is <filename><replaceable>EXEC-PREFIX</>/bin</>, which
         normally means <filename>/usr/local/pgsql/bin</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--sysconfdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for various configuration files,
         <filename><replaceable>PREFIX</>/etc</> by default.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--libdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the location to install libraries and dynamically loadable
         modules. The default is
         <filename><replaceable>EXEC-PREFIX</>/lib</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--includedir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for installing C and C++ header files. The
         default is <filename><replaceable>PREFIX</>/include</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datarootdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the root directory for various types of read-only data
         files.  This only sets the default for some of the following
         options.  The default is
         <filename><replaceable>PREFIX</>/share</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datadir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for read-only data files used by the
         installed programs. The default is
         <filename><replaceable>DATAROOTDIR</></>. Note that this has
         nothing to do with where your database files will be placed.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--localedir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for installing locale data, in particular
         message translation catalog files.  The default is
         <filename><replaceable>DATAROOTDIR</>/locale</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--mandir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>




         The man pages that come with <productname>Postgres-XC</> will be installed under

         this directory, in their respective
         <filename>man<replaceable>x</></> subdirectories.
         The default is <filename><replaceable>DATAROOTDIR</>/man</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--docdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the root directory for installing documentation files,
         except <quote>man</> pages.  This only sets the default for
         the following options.  The default value for this option is
         <filename><replaceable>DATAROOTDIR</>/doc/postgresql</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--htmldir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         The HTML-formatted documentation for




         <productname>Postgres-XC</productname> will be installed under

         this directory.  The default is
         <filename><replaceable>DATAROOTDIR</></>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <para>
       Care has been taken to make it possible to install




       <productname>Postgres-XC</> into shared installation locations

       (such as <filename>/usr/local/include</filename>) without
       interfering with the namespace of the rest of the system. First,
       the string <quote><literal>/postgresql</literal></quote> is
       automatically appended to <varname>datadir</varname>,
       <varname>sysconfdir</varname>, and <varname>docdir</varname>,
       unless the fully expanded directory name already contains the
       string <quote><literal>gaussdb</></quote> or
       <quote><literal>pgsql</></quote>. For example, if you choose
       <filename>/usr/local</filename> as prefix, the documentation will
       be installed in <filename>/usr/local/doc/postgresql</filename>,
       but if the prefix is <filename>/opt/gaussdb</filename>, then it
       will be in <filename>/opt/gaussdb/doc</filename>. The public C
       header files of the client interfaces are installed into
       <varname>includedir</varname> and are namespace-clean. The
       internal header files and the server header files are installed
       into private directories under <varname>includedir</varname>. See
       the documentation of each interface for information about how to
       access its header files. Finally, a private subdirectory will
       also be created, if appropriate, under <varname>libdir</varname>
       for dynamically loadable modules.
      </para>
     </note>
    </para>

    <para>
     <variablelist>
      <varlistentry>
       <term><option>--with-includes=<replaceable>DIRECTORIES</></option></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories that will be added to the list the compiler
         searches for header files. If you have optional packages
         (such as GNU <application>Readline</>) installed in a non-standard
         location,
         you have to use this option and probably also the corresponding
         <option>--with-libraries</> option.
        </para>
        <para>
         Example: <literal>--with-includes=/opt/gnu/include:/usr/sup/include</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libraries=<replaceable>DIRECTORIES</></option></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories to search for libraries. You will probably have
         to use this option (and the corresponding
         <option>--with-includes</> option) if you have packages
         installed in non-standard locations.
        </para>
        <para>
         Example: <literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-nls<optional>=<replaceable>LANGUAGES</replaceable></optional></option></term>
       <listitem>
        <para>
         Enables Native Language Support (<acronym>NLS</acronym>),
         that is, the ability to display a program's messages in a
         language other than English.
         <replaceable>LANGUAGES</replaceable> is an optional space-separated
         list of codes of the languages that you want supported, for
         example <literal>--enable-nls='de fr'</>.  (The intersection
         between your list and the set of actually provided
         translations will be computed automatically.)  If you do not
         specify a list, then all available translations are
         installed.
        </para>

        <para>
         To use this option, you will need an implementation of the
         <application>Gettext</> API; see above.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pgport=<replaceable>NUMBER</></option></term>
       <listitem>
        <para>
         Set <replaceable>NUMBER</> as the default port number for
         server and clients. The default is 5432. The port can always
         be changed later on, but if you specify it here then both
         server and clients will have the same default compiled in,
         which can be very convenient.  Usually the only good reason
         to select a non-default value is if you intend to run multiple




         <productname>Postgres-XC</> servers on the same machine.

        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-perl</option></term>
       <listitem>
        <para>
         Build the <application>PL/Perl</> server-side language.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-python</option></term>
       <listitem>
        <para>
         Build the <application>PL/Python</> server-side language.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tcl</option></term>
       <listitem>
        <para>
         Build the <application>PL/Tcl</> server-side language.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tclconfig=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Tcl installs the file <filename>tclConfig.sh</filename>, which
         contains configuration information needed to build modules
         interfacing to Tcl. This file is normally found automatically
         at a well-known location, but if you want to use a different
         version of Tcl you can specify the directory in which to look
         for it.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-gssapi</option></term>
       <listitem>
        <para>
         Build with support for GSSAPI authentication. On many
         systems, the GSSAPI (usually a part of the Kerberos installation)
         system is not installed in a location
         that is searched by default (e.g., <filename>/usr/include</>,
         <filename>/usr/lib</>), so you must use the options
         <option>--with-includes</> and <option>--with-libraries</> in
         addition to this option.  <filename>configure</> will check
         for the required header files and libraries to make sure that
         your GSSAPI installation is sufficient before proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-krb5</option></term>
       <listitem>
        <para>
         Build with support for Kerberos 5 authentication. On many
         systems, the Kerberos system is not installed in a location
         that is searched by default (e.g., <filename>/usr/include</>,
         <filename>/usr/lib</>), so you must use the options
         <option>--with-includes</> and <option>--with-libraries</> in
         addition to this option.  <filename>configure</> will check
         for the required header files and libraries to make sure that
         your Kerberos installation is sufficient before proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-krb-srvnam=<replaceable>NAME</></option></term>
       <listitem>
        <para>
         The default name of the Kerberos service principal (also used
         by GSSAPI).
         <literal>gaussdb</literal> is the default. There's usually no
         reason to change this unless you have a Windows environment,
         in which case it must be set to upper case
         <literal>POSTGRES</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <indexterm>
        <primary>OpenSSL</primary>
        <seealso>SSL</seealso>
       </indexterm>

       <term><option>--with-openssl</option></term>
       <listitem>
        <para>
         Build with support for <acronym>SSL</> (encrypted)
         connections. This requires the <productname>OpenSSL</>
         package to be installed.  <filename>configure</> will check
         for the required header files and libraries to make sure that
         your <productname>OpenSSL</> installation is sufficient
         before proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pam</option></term>
       <listitem>
        <para>
         Build with <acronym>PAM</><indexterm><primary>PAM</></>
         (Pluggable Authentication Modules) support.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ldap</option></term>
       <listitem>
        <para>
         Build with <acronym>LDAP</><indexterm><primary>LDAP</></>
         support for authentication and connection parameter lookup (see
         <![%standalone-include[the documentation about client authentication
         and libpq]]><![%standalone-ignore[<xref linkend="libpq-ldap"> and
         <xref linkend="auth-ldap">]]> for more information). On Unix,
         this requires the <productname>OpenLDAP</> package to be
         installed. On Windows, the default <productname>WinLDAP</>
         library is used.  <filename>configure</> will check for the required
         header files and libraries to make sure that your
         <productname>OpenLDAP</> installation is sufficient before
         proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-readline</option></term>
       <listitem>
        <para>
         Prevents use of the <application>Readline</> library
         (and <application>libedit</> as well).  This option disables
         command-line editing and history in
         <application>gsql</application>, so it is not recommended.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libedit-preferred</option></term>
       <listitem>
        <para>
         Favors the use of the BSD-licensed <application>libedit</> library
         rather than GPL-licensed <application>Readline</>.  This option
         is significant only if you have both libraries installed; the
         default in that case is to use <application>Readline</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-bonjour</option></term>
       <listitem>
        <para>
         Build with Bonjour support.  This requires Bonjour support
         in your operating system.  Recommended on Mac OS X.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ossp-uuid</option></term>
       <listitem>
        <para>
         Build components using the <ulink
         url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUID
         library</ulink>.  Specifically, build the
         <![%standalone-include[uuid-ossp]]>
         <![%standalone-ignore[<xref linkend="uuid-ossp">]]> module,
         which provides functions to generate
         UUIDs.<indexterm><primary>UUID</primary></indexterm>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxml</option></term>
       <listitem>
        <para>
         Build with libxml (enables SQL/XML support).  Libxml version 2.6.23 or
         later is required for this feature.
        </para>

        <para>
         Libxml installs a program <command>xml2-config</command> that
         can be used to detect the required compiler and linker




         options.  Postgres-XC will use it automatically if found.  To

         specify a libxml installation at an unusual location, you can
         either set the environment variable
         <envar>XML2_CONFIG</envar> to point to the
         <command>xml2-config</command> program belonging to the
         installation, or use the options
         <option>--with-includes</option> and
         <option>--with-libraries</option>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxslt</option></term>
       <listitem>
        <para>
         Use libxslt when building the
         <![%standalone-include[xml2]]>
         <![%standalone-ignore[<xref linkend="xml2">]]>
         module.  <application>xml2</> relies on this library
         to perform XSL transformations of XML.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-integer-datetimes</option></term>
       <listitem>
        <para>
         Disable support for 64-bit integer storage for timestamps and
         intervals, and store datetime values as floating-point
         numbers instead. Floating-point datetime storage was the




         default in <productname>Postgres-XC</productname> releases

         prior to 8.4, but it is now deprecated, because it does not
         support microsecond precision for the full range of
         <type>timestamp</type> values. However, integer-based
         datetime storage requires a 64-bit integer type. Therefore,
         this option can be used when no such type is available, or
         for compatibility with applications written for prior




         versions of <productname>Postgres-XC</productname>. See

         <![%standalone-include[the documentation about datetime datatypes]]>
         <![%standalone-ignore[<xref linkend="datatype-datetime">]]>
         for more information.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-float4-byval</option></term>
       <listitem>
        <para>
         Disable passing float4 values <quote>by value</>, causing them
         to be passed <quote>by reference</> instead.  This option costs
         performance, but may be needed for compatibility with old
         user-defined functions that are written in C and use the
         <quote>version 0</> calling convention.  A better long-term
         solution is to update any such functions to use the
         <quote>version 1</> calling convention.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-float8-byval</option></term>
       <listitem>
        <para>
         Disable passing float8 values <quote>by value</>, causing them
         to be passed <quote>by reference</> instead.  This option costs
         performance, but may be needed for compatibility with old
         user-defined functions that are written in C and use the
         <quote>version 0</> calling convention.  A better long-term
         solution is to update any such functions to use the
         <quote>version 1</> calling convention.
         Note that this option affects not only float8, but also int8 and some
         related types such as timestamp.
         On 32-bit platforms, <option>--disable-float8-byval</> is the default
         and it is not allowed to select <option>--enable-float8-byval</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>segment size</>, in gigabytes.  Large tables are
         divided into multiple operating-system files, each of size equal
         to the segment size.  This avoids problems with file size limits
         that exist on many platforms.  The default segment size, 1 gigabyte,
         is safe on all supported platforms.  If your operating system has
         <quote>largefile</> support (which most do, nowadays), you can use
         a larger segment size.  This can be helpful to reduce the number of
         file descriptors consumed when working with very large tables.
         But be careful not to select a value larger than is supported
         by your platform and the file systems you intend to use.  Other
         tools you might wish to use, such as <application>tar</>, could
         also set limits on the usable file size.
         It is recommended, though not absolutely required, that this value
         be a power of 2.
         Note that changing this value requires an gs_initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>block size</>, in kilobytes.  This is the unit
         of storage and I/O within tables.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 32 (kilobytes).
         Note that changing this value requires an gs_initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>WAL segment size</>, in megabytes.  This is
         the size of each individual file in the WAL log.  It may be useful
         to adjust this size to control the granularity of WAL log shipping.
         The default size is 16 megabytes.
         The value must be a power of 2 between 1 and 64 (megabytes).
         Note that changing this value requires an gs_initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>WAL block size</>, in kilobytes.  This is the unit
         of storage and I/O within the WAL log.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 64 (kilobytes).
         Note that changing this value requires an gs_initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-spinlocks</option></term>
       <listitem>
        <para>




         Allow the build to succeed even if <productname>Postgres-XC</>

         has no CPU spinlock support for the platform.  The lack of
         spinlock support will result in poor performance; therefore,
         this option should only be used if the build aborts and
         informs you that the platform lacks spinlock support. If this




         option is required to build <productname>Postgres-XC</> on

         your platform, please report the problem to the




         <productname>Postgres-XC</> developers.

        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-thread-safety</option></term>
       <listitem>
        <para>
         Disable the thread-safety of client libraries.  This prevents
         concurrent threads in <application>libpq</application> and
         <application>ECPG</application> programs from safely controlling
         their private connection handles.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-system-tzdata=<replaceable>DIRECTORY</replaceable></option></term>
       <indexterm>
        <primary>time zone data</primary>
       </indexterm>
       <listitem>
        <para>




         <productname>Postgres-XC</> includes its own time zone database,

         which it requires for date and time operations.  This time zone
         database is in fact compatible with the <quote>zoneinfo</> time zone
         database provided by many operating systems such as FreeBSD,
         Linux, and Solaris, so it would be redundant to install it again.
         When this option is used, the system-supplied time zone database
         in <replaceable>DIRECTORY</replaceable> is used instead of the one
         included in the PostgreSQL source distribution.
         <replaceable>DIRECTORY</replaceable> must be specified as an
         absolute path.  <filename>/usr/share/zoneinfo</filename> is a
         likely directory on some operating systems.  Note that the
         installation routine will not detect mismatching or erroneous time
         zone data.  If you use this option, you are advised to run the
         regression tests to verify that the time zone data you have




         pointed to works correctly with <productname>Postgres-XC</>.

        </para>

        <indexterm><primary>cross compilation</primary></indexterm>

        <para>
         This option is mainly aimed at binary package distributors
         who know their target operating system well.  The main




         advantage of using this option is that the Postgres-XC package

         won't need to be upgraded whenever any of the many local
         daylight-saving time rules change.  Another advantage is that




         Postgres-XC can be cross-compiled more straightforwardly if the

         time zone database files do not need to be built during the
         installation.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-zlib</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>zlib</primary>
         </indexterm>
         Prevents use of the <application>Zlib</> library.  This disables
         support for compressed archives in <application>gs_dump</application>
         and <application>pg_restore</application>.
         This option is only intended for those rare systems where this
         library is not available.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-debug</option></term>
       <listitem>
        <para>
         Compiles all programs and libraries with debugging symbols.
         This means that you can run the programs in a debugger
         to analyze problems. This enlarges the size of the installed
         executables considerably, and on non-GCC compilers it usually
         also disables compiler optimization, causing slowdowns. However,
         having the symbols available is extremely helpful for dealing
         with any problems that might arise.  Currently, this option is
         recommended for production installations only if you use GCC.
         But you should always have it on if you are doing development work
         or running a beta version.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-coverage</option></term>
       <listitem>
        <para>










         <!-- regress-coverage is not included in XC reference -->
         If using GCC, all programs and libraries are compiled with
         code coverage testing instrumentation.  When run, they
         generate files in the build directory with code coverage
         metrics.
         This option is for use only with GCC
         and when doing development work.

        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-profiling</option></term>
       <listitem>
        <para>
         If using GCC, all programs and libraries are compiled so they
         can be profiled.  On backend exit, a subdirectory will be created
         that contains the <filename>gmon.out</> file for use in profiling.
         This option is for use only with GCC and when doing development work.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-cassert</option></term>
       <listitem>
        <para>
         Enables <firstterm>assertion</> checks in the server, which test for
         many <quote>cannot happen</> conditions.  This is invaluable for
         code development purposes, but the tests can slow down the
         server significantly.
         Also, having the tests turned on won't necessarily enhance the
         stability of your server!  The assertion checks are not categorized
         for severity, and so what might be a relatively harmless bug will
         still lead to server restarts if it triggers an assertion
         failure.  This option is not recommended for production use, but
         you should have it on for development work or when running a beta
         version.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-depend</option></term>
       <listitem>
        <para>
         Enables automatic dependency tracking.  With this option, the
         makefiles are set up so that all affected object files will
         be rebuilt when any header file is changed.  This is useful
         if you are doing development work, but is just wasted overhead
         if you intend only to compile once and install.  At present,
         this option only works with GCC.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-dtrace</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>DTrace</primary>
         </indexterm>




         Compiles <productname>Postgres-XC</productname> with support for the

         dynamic tracing tool DTrace.
         <![%standalone-ignore[See <xref linkend="dynamic-trace">
         for more information.]]>
        </para>

        <para>
         To point to the <command>dtrace</command> program, the
         environment variable <envar>DTRACE</envar> can be set.  This
         will often be necessary because <command>dtrace</command> is
         typically installed under <filename>/usr/sbin</filename>,
         which might not be in the path.
        </para>

        <para>
         Extra command-line options for the <command>dtrace</command> program
         can be specified in the environment variable
         <envar>DTRACEFLAGS</envar>.  On Solaris,
         to include DTrace support in a 64-bit binary, you must specify
         <literal>DTRACEFLAGS="-64"</> to configure.  For example,
         using the GCC compiler:
<screen>
./configure CC='gcc -m64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
         Using Sun's compiler:
<screen>
./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
        </para>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

    <para>
     If you prefer a C compiler different from the one
     <filename>configure</filename> picks, you can set the
     environment variable <envar>CC</> to the program of your choice.
     By default, <filename>configure</filename> will pick
     <filename>gcc</filename> if available, else the platform's
     default (usually <filename>cc</>).  Similarly, you can override the
     default compiler flags if needed with the <envar>CFLAGS</envar> variable.
    </para>

    <para>
     You can specify environment variables on the
     <filename>configure</filename> command line, for example:






<screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe -DPGXC'</>
</screen>
     Please note that you need to specify <filename>-DPGXC</>
     explicitly to specify <filename>CFLAGS</> option.

    </para>

    <para>
     Here is a list of the significant variables that can be set in
     this manner:

     <variablelist>
      <varlistentry>
       <term><envar>BISON</envar></term>
       <listitem>
        <para>
         Bison program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CC</envar></term>
       <listitem>
        <para>
         C compiler
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CFLAGS</envar></term>
       <listitem>
        <para>
         options to pass to the C compiler
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPP</envar></term>
       <listitem>
        <para>
         C preprocessor
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPPFLAGS</envar></term>
       <listitem>
        <para>
         options to pass to the C preprocessor
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACE</envar></term>
       <listitem>
        <para>
         location of the <command>dtrace</command> program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACEFLAGS</envar></term>
       <listitem>
        <para>
         options to pass to the <command>dtrace</command> program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>FLEX</envar></term>
       <listitem>
        <para>
         Flex program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS</envar></term>
       <listitem>
        <para>
         options to use when linking either executables or shared libraries
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_EX</envar></term>
       <listitem>
        <para>
         additional options for linking executables only
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_SL</envar></term>
       <listitem>
        <para>
         additional options for linking shared libraries only
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>MSGFMT</envar></term>
       <listitem>
        <para>
         <command>msgfmt</command> program for native language support
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PERL</envar></term>
       <listitem>
        <para>
         Full path to the Perl interpreter.  This will be used to
         determine the dependencies for building PL/Perl.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PYTHON</envar></term>
       <listitem>
        <para>
         Full path to the Python interpreter.  This will be used to
         determine the dependencies for building PL/Python.  Also,
         whether Python 2 or 3 is specified here (or otherwise
         implicitly chosen) determines which variant of the PL/Python
         language becomes available.  See
         <![%standalone-include[the <application>PL/Python</>
         documentation]]>
         <![%standalone-ignore[<xref linkend="plpython-python23">]]>
         for more information.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>TCLSH</envar></term>
       <listitem>
        <para>
         Full path to the Tcl interpreter.  This will be used to
         determine the dependencies for building PL/Tcl, and it will
         be substituted into Tcl scripts.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>XML2_CONFIG</envar></term>
       <listitem>
        <para>
         <command>xml2-config</command> program used to locate the
         libxml installation.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </step>

  <step id="build">
   <title>Build</title>

   <para>
    To start the build, type:
<screen>
<userinput>gmake</userinput>
</screen>
    (Remember to use <acronym>GNU</> <application>make</>.) The build
    will take a few minutes depending on your
    hardware. The last line displayed should be:
<screen>




All of Postgres-XC is successfully made. Ready to install.

</screen>
   </para>

  <para>
   If you want to build everything that can be built, including the
   documentation (HTML and man pages), and the additional modules
   (<filename>contrib</filename>), type instead:
<screen>
<userinput>gmake world</userinput>
</screen>
   The last line displayed should be:






<screen>
Postgres-XC, contrib and HTML documentation successfully made. Ready to install.
</screen>

   </para>
  </step>






























  <step id="install">
   <title>Installing the Files</title>

   <note>
    <para>
     If you are upgrading an existing system be sure to read
     <![%standalone-include[the documentation,]]>
     <![%standalone-ignore[<xref linkend="upgrading">]]>
     which has instructions about upgrading a
     cluster.
    </para>
   </note>

   <para>
    Before learning how to install <productname>Postgres-XC</>, you should learn
    what you are going to install to what server.  The following lists
    <productname>Postgres-XC</> components you've built and you're going to install.

    <variablelist>
     <varlistentry>
      <term><envar>GTM</envar></term>
      <listitem>
       <para>
        GTM stands for global transaction manager.  It provides global transaction ID
        and snapshot to each transaction in <productname>Postgres-XC</> database cluster.
        It also provide several global value such as sequence and global timestamp.
       </para>
       <para>
        GTM itself can be configured as a backup of other GTM as
        GTM-Standby so that GTM can continue to run even if main GTM
        fails.  You may want to install GTM-Standby to separate
        server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><envar>GTM-Proxy</envar></term>
      <listitem>
      <para>
       Because GTM has to take care of each transaction, it has to
       read and write enormous amount of messages which may
       restrict <productname>Postgres-XC</> scalability.  GTM-Proxy is
       a proxy of GTM feature which groups requests and response to
       reduce network read/write by GTM.  Distributing one snapshot to
       multiple transactions also contributes to reduce GTM network
       workload.
      </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><envar>Coordinator</envar></term>
      <listitem>
       <para>
        Coordinator is an entry point to <productname>Postgres-XC</> from applications.
        You can run more than one Coordinator in parallel.   Each Coordinator behaves
        as just <productname>PostgreSQL</> database server, while all the Coordinators
        handles transactions in harmonized way so that any transaction coming into one
        Coordinator is protected against any other transactions coming into others.
        Updates by a transaction is visible immediately to others running in other
        Coordinators.
        To simplify the load balance of Coordinators and Datanodes, as mentioned
        below, it is highly advised to install same number of Coordinator and Datanode
        in a server.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><envar>Datanode</envar></term>
      <listitem>
       <para>
        Datanode 
       </para>
       <para>
        Coordinator and Datanode shares the same binary but their behavior is a little
        different.   Coordinator decomposes incoming statements into those handled by
        Datanodes.   If necessary, Coordinator materializes response from Datanodes
        to calculate final response to applications.
       </para>
       <para>
        Datanode is very close to PostgreSQL itself because it just handles incoming
        statements locally.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>


   <para>




    To install <productname>Postgres-XC</> enter:

<screen>
<userinput>gmake install</userinput>
</screen>
    This will install files into the directories that were specified
    in <xref linkend="configure">. Make sure that you have appropriate
    permissions to write into that area. Normally you need to do this
    step as root. Alternatively, you can create the target
    directories in advance and arrange for appropriate permissions to
    be granted.
   </para>

   <para>




    To install the documentation (HTML and man pages), enter:

<screen>
<userinput>gmake install-docs</userinput>
</screen>
   </para>

   <para>
    If you built the world above, type instead:
<screen>
<userinput>gmake install-world</userinput>
</screen>
    This also installs the documentation.
   </para>

   <para>
    You can use <literal>gmake install-strip</literal> instead of
    <literal>gmake install</literal> to strip the executable files and
    libraries as they are installed.  This will save some space.  If
    you built with debugging support, stripping will effectively
    remove the debugging support, so it should only be done if
    debugging is no longer needed.  <literal>install-strip</literal>
    tries to do a reasonable job saving space, but it does not have
    perfect knowledge of how to strip every unneeded byte from an
    executable file, so if you want to save all the disk space you
    possibly can, you will have to do manual work.
   </para>

   <para>
    The standard installation provides all the header files needed for client
    application development as well as for server-side program
    development, such as custom functions or data types written in C.
    (Prior to <productname>PostgreSQL</> 8.0, a separate <literal>gmake
    install-all-headers</> command was needed for the latter, but this
    step has been folded into the standard install.)
   </para>

   <formalpara>
    <title>Client-only installation:</title>
    <para>
     If you want to install only the client applications and
     interface libraries, then you can use these commands:
<screen>
<userinput>gmake -C src/bin install</>
<userinput>gmake -C src/include install</>
<userinput>gmake -C src/interfaces install</>
<userinput>gmake -C doc install</>
</screen>
    <filename>src/bin</> has a few binaries for server-only use,
    but they are small.
    </para>
   </formalpara>
  </step>
  </procedure>
















  <formalpara>
   <title>Uninstallation:</title>
   <para>
    To undo the installation use the command <command>gmake
    uninstall</>. However, this will not remove any created directories.
   </para>
  </formalpara>

  <formalpara>
   <title>Cleaning:</title>

   <para>
    After the installation you can free disk space by removing the built
    files from the source tree with the command <command>gmake
    clean</>. This will preserve the files made by the <command>configure</command>
    program, so that you can rebuild everything with <command>gmake</>
    later on. To reset the source tree to the state in which it was
    distributed, use <command>gmake distclean</>. If you are going to
    build for several platforms within the same source tree you must do
    this and re-configure for each platform.  (Alternatively, use
    a separate build tree for each platform, so that the source tree
    remains unmodified.)
   </para>
  </formalpara>

  <para>
   If you perform a build and then discover that your <command>configure</>
   options were wrong, or if you change anything that <command>configure</>
   investigates (for example, software upgrades), then it's a good
   idea to do <command>gmake distclean</> before reconfiguring and
   rebuilding.  Without this, your changes in configuration choices
   might not propagate everywhere they need to.
  </para>
 </sect1>

 <sect1 id="install-post">
  <title>Post-Installation Setup</title>
&xconly;
  <sect2>
   <title>Shared Libraries</title>

   <indexterm>
    <primary>shared library</primary>
   </indexterm>
&xconly;
   <para>














    On some systems with shared libraries
    you need to tell the system how to find the newly installed
    shared libraries.
    However, <systemitem class="osname">Linux</> does <emphasis>not</> need this.

   </para>

   <para>
    The method to set the shared library search path varies between
    platforms, but the most widely-used method is to set the
    environment variable <envar>LD_LIBRARY_PATH</> like so: In Bourne
    shells (<command>sh</>, <command>ksh</>, <command>bash</>, <command>zsh</>):
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
    or in <command>csh</> or <command>tcsh</>:
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
    Replace <literal>/usr/local/pgsql/lib</> with whatever you set
    <option><literal>--libdir</></> to in <xref linkend="configure">.
    You should put these commands into a shell start-up file such as
    <filename>/etc/profile</> or <filename>~/.bash_profile</>.  Some
    good information about the caveats associated with this method can
    be found at <ulink
    url="http://xahlee.org/UnixResource_dir/_/ldpath.html"></ulink>.
   </para>

   <para>
    On some systems it might be preferable to set the environment
    variable <envar>LD_RUN_PATH</envar> <emphasis>before</emphasis>
    building.
   </para>

   <para>
    On <systemitem class="osname">Cygwin</systemitem>, put the library
    directory in the <envar>PATH</envar> or move the
    <filename>.dll</filename> files into the <filename>bin</filename>
    directory.
   </para>

   <para>
    If in doubt, refer to the manual pages of your system (perhaps
    <command>ld.so</command> or <command>rld</command>). If you later
    get a message like:
<screen>
gsql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
    then this step was necessary.  Simply take care of it then.
   </para>

   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>






    Because you are <systemitem
    class="osname">Linux</>, 
    you have root access and you can run:

<programlisting>
/sbin/ldconfig /usr/local/pgsql/lib
</programlisting>













   </para>
  </sect2>

  <sect2>
   <title>Environment Variables</title>

   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>

   <para>
    If you installed into <filename>/usr/local/pgsql</> or some other
    location that is not searched for programs by default, you should
    add <filename>/usr/local/pgsql/bin</> (or whatever you set
    <option><literal>--bindir</></> to in <xref linkend="configure">)
    into your <envar>PATH</>.  Strictly speaking, this is not




    necessary, but it will make the use of <productname>Postgres-XC</>

    much more convenient.
   </para>

   <para>
    To do this, add the following to your shell start-up file, such as
    <filename>~/.bash_profile</> (or <filename>/etc/profile</>, if you
    want it to affect all users):
<programlisting>
PATH=/usr/local/pgsql/bin:$PATH
export PATH
</programlisting>
    If you are using <command>csh</> or <command>tcsh</>, then use this command:
<programlisting>
set path = ( /usr/local/pgsql/bin $path )
</programlisting>
   </para>

   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
    To enable your system to find the <application>man</>
    documentation, you need to add lines like the following to a
    shell start-up file unless you installed into a location that is
    searched by default:
<programlisting>
MANPATH=/usr/local/pgsql/man:$MANPATH
export MANPATH
</programlisting>
   </para>

   <para>
    The environment variables <envar>PGHOST</> and <envar>PGPORT</>
    specify to client applications the host and port of the database
    server, overriding the compiled-in defaults. If you are going to
    run client applications remotely then it is convenient if every
    user that plans to use the database sets <envar>PGHOST</>.  This
    is not required, however; the settings can be communicated via command
    line options to most client programs.
   </para>

&xconly;
   <para>
    When, as typical case, you're configuring both Coordinator and
    Datanode in a same server, please be careful not to assign same
    resource, such as listening point (IP address and port number) to
    different component.  If you apply single set of environment
    described here to different components, they will conflict
    and <productname>Postgres-XC</> will not run correctly.
   </para>

  </sect2>
 </sect1>


<![%standalone-include;[
 <sect1 id="install-getting-started">
  <title>Getting Started</title>

  <para>




   The following is a quick summary of how to get <productname>Postgres-XC</> up and

   running once installed. The main documentation contains more information.
  </para>

  <procedure>
   <step>
    <para>










     Create a user account on all the servers where at least one
     of <productname>Postgres-XC</> component runs. This is the user
     the components will run as. For production use you should create a
     separate, unprivileged account (<quote>gaussdb</> is commonly
     used). If you do not have root access or just want to play
     around, your own user account is enough, but running the server
     as root is a security risk and will not work.

<screen>
<userinput>adduser gaussdb</>
</screen>
    </para>
   </step>



   <step>
&xconly;
    <para>
     If you follow the previous steps, you will have files ready to
     distribute to servers where you want to run one or
     more <productname>Postgres-XC</> components.   
    </para>
    <para> 
     After you've installed your build locally, build target
     will include the following directories.

<screen>
bin/  include/  lib/  share/
</screen>

     <filename>bin</> directory contains executable binaries and
     scripts.  <filename>include</> contains header files needed to
     build <productname>Postgres-XC</> applications.  <filename>lib</>
     contains shared libraries needed to run binaries, as well as
     static libraries which should be included into your application
     binaries.  Finally, <productname>share</> contains miscellaneous
     files <productname>Postgres-XC</> should read at runtime, as well
     as sample files.

    </para>

    <para>

     If your servers has sufficient file space, you can copy all the
     files to the target server.  Total size is less than 30mega
     bytes.  If you want to install minimum files to each servers,
     please follow the following paragraphs.

    </para>

    <para>
     For the server to run GTM or GTM-Standby, you need to copy the
     following files to your path: <filename>bin/gs_gtm</> and <filename>bin/gtm_ctl</>.
    </para>

    <para>
     For the server to run GTM-Proxy (the server you run Coordinator and/or Datanode),
     you need to copy the following files to your path: <filename>bin/gtm_proxy</filename>
     and <filename>bin/gtm_ctl</>.
    </para>

    <para>
     For server to run Coordinator or Datanode, or both, you should
     copy the following files to your
     path: <filename>bin/gs_initdb</>.
     You should also copy everything in <filename>path</> directory to
     your library search path.
    </para>

   </step>




   <step>
&common;
    <para>
     Create a database installation with the <command>gs_initdb</>
     command. To run <command>gs_initdb</> you must be logged in to your




     <productname>Postgres-XC</> server account. It will not work as

     root.
<screen>
root# <userinput>mkdir /usr/local/pgsql/data</>
root# <userinput>chown gaussdb /usr/local/pgsql/data</>
root# <userinput>su - gaussdb</>
gaussdb$ <userinput>/usr/local/pgsql/bin/gs_initdb -D /usr/local/pgsql/data</>
</screen>
    </para>

    <para>
     The <option>-D</> option specifies the location where the data
     will be stored. You can use any path you want, it does not have
     to be under the installation directory. Just make sure that the
     server account can write to the directory (or create it, if it
     doesn't already exist) before starting <command>gs_initdb</>, as
     illustrated here.
    </para>

    <para>
     If you're configuring both Datanode and Coordinator on the same
     server, you should specify different <option>-D</> option for
     each of them.
    </para>

   </step>

   <step>
&common;
    <para>
     At this point, if you did not use the <command>gs_initdb</> <literal>-A</>
     option, you might want to modify <filename>pg_hba.conf</> to control
     local access to the server before you start it.  The default is to
     trust all local users.
    </para>
   </step>


   <step>
&xconly;
    <para>
    You should configure GTM and GTM-Proxy, as well as
    GTM-Standby if you need high-availability capability for GTM
    before you really run <productname>Postgres-XC</> database
    cluster.  You can do the following before you
    run <command>gs_initdb</>.
    </para>
    <para>
     Each GTM, GTM-Proxy and GTM needs their own working directories.
     Create them as <productname>Postgres-XC</> owner user.  Please
     assign port number to each of them, although you don't have to do
     any configuration work now.
    </para>
   </step>

   <step>
&xconly;
    <para>
    Now you should configure each Coordinator and Datanode.  Because
    they have to communicate each other and number of servers,
    Datanodes and Coordinators depend upon configurations, we don't
    provide default configuration file for them.
    </para>
    <para>
     You can configure Datanode and Coordinator by
     editing <filename>postgresql.conf</> file located under the
     directory you specified with <option>-D</> option
     of <command>gs_initdb</>.   The following paragraphs describe what
     parameter to edit at least for Coordinators.   You can specify
     any other <filename>postgresql.conf</> parameters as
     standalone <productname>PostgreSQL</>.
    </para>

    <variablelist>
    <varlistentry>
     <term><envar>max_prepared_transactions</envar></term>
     <listitem>
&xconly;
      <para>
       <option>max_prepared_transactions</> specifies maximum number
       of two-phase commit transactions.   Even if you don't use
       explicit two phase commit operation, Coordinator may issue
       two-phase commit operation implicitly if a transaction is
       involved with multiple Datanodes and/or Coordinators. You should
       specify <option>max_prepared_transactions</> value at 
       least the number of <option>max_connection</>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>max_pool_size</envar></term>
     <listitem>
&xconly;
      <para>
       This parameter specifies maximum number of the pooled
       connection.  This value should be at least more than the number
       of all the Coordinators and Datanodes.   If you specify less
       value, you will see very frequent close and ope connection
       which leads to serious performance problem.
       If you're not configuring <productname>XC</> cluster in
       unbalanced way, you should specify the same value to all the
       Coordinators.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>max_coordinators</envar></term>
     <listitem>
&xconly;
      <para>
       This parameter specifies maximum number of the Coordinators that can
       be added to the cluster. Cluster would have to be restarted to increase
       the value.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>max_datanodes</envar></term>
     <listitem>
&xconly;
      <para>
       This parameter specifies maximum number of the Datanodes that can
       be added to the cluster. Cluster would have to be restarted to increase
       the value.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>pgxc_node_name</envar></term>
     <listitem>
&xconly;
      <para>
       Specify the name of this cluster node. This name index refers to the
       element of <link linkend="catalog-pgxc-node"><structname>pgxc_node
       </structname></link>.node_name value, to identify the node self.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>port</envar></term>
     <listitem>
&xconly;
      <para>
       Specify the port number listened to by this Coordinator.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>pooler_port</envar></term>
     <listitem>
&xconly;
      <para>
       Connection pooler needs separate port.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>gtm_port</envar></term>
     <listitem>
&xconly;
      <para>
       Specify the port number of gs_gtm you're connecting to.  This is
       local to the server and you should specify the port assigned to
       the GTM-Proxy local to the Coordinator.
      </para>
     </listitem>
    </varlistentry>

    </variablelist>                                                             

   <step>
&xconly;
    <para>
     Now you should configure <filename>postgresql.conf</> for each
     Datanodes.  Please note, as in the case of Coordinator, you can
     specify other <filename>postgresql.conf</> parameters as in
     standalone <productname>PostgreSQL</>.
    </para>

    <variablelist>

    <varlistentry>
     <term><envar>max_connections</envar></term>
     <listitem>
&xconly;
      <para>
       <option>max_connections</> is, in short, a maximum number of
       background processes of the Datanode.   You should be careful
       to specify reasonable value to this parameter because each
       Coordinator backend may have connections to all the Datanodes.
       You should specify this value as <option>max_connections</> of
       Coordinator multiplied by the number of Coordinators.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>max_prepared_transactions</envar></term>
     <listitem>
&xconly;
      <para>
       <option>max_prepared_transactions</> specifies maximum number
       of two-phase commit transactions.   Even if you don't use
       explicit two phase commit operation, Coordinator may issue
       two-phase commit operation implicitly if a transaction is
       involved with multiple Datanodes and/or Coordinators.   The value
       of this parameter should be at least the value
       of <option>max_connections</> of Coordinator multiplied by the number of Coordinators.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><envar>port</envar></term>
     <listitem>
&xconly;
      <para>
       Specify the port number listened to by the Datanode.
      </para>
     </listitem>
    </varlistentry>

     <term><envar>gtm_port</envar></term>
     <listitem>
&xconly;
      <para>
       Specify the port number of gs_gtm you're connecting to.  This is
       local to the server and you should specify the port assigned to
       the GTM-Proxy local to the Datanode.
      </para>
     </listitem>
    </varlistentry>

    </variablelist>
   </step>

   <step>
&xconly;
    <para>
     Then you are ready to start <productname>Postgres-XC</> cluster.
     First, you should start GTM bu something like:
<programlisting>
gs_gtm -D /usr/local/pgsql/gs_gtm -h localhost -p 20001 -n 1 -x 1000
</programlisting>
     This will start GTM.   <option>-h</> specifies IP address or host
     name to listen to the connection
     from <command>gtm_standby</>.   <option>-p</> specifies the port
     number to listen to.   <option>-n</> specifies the node number
     within GTM.   This identifies GTM especially when you run
     GTM-Standby.  <option>-x</> option specifies the value of initial
     Global Transaction ID.   We need to specify this
     because <command>gs_initdb</> consumes some of the transaction ID
     locally and GTM must to begin to provide global transaction ID
     greater than the consumed one.   So far, value 1000 is believed
     to be safe.
    </para>
   </step>

   <step>
&xconly;
    <para>
     Next, you should start GTM-Proxy on each server you're running
     Coordinator and/or Datanode like:
<programlisting>
gtm_proxy -h localhost -p 20002 -s localhost -t 20001 -i 1 -n 2 -D /usr/local/pgsql/gtm_proxy
</programlisting>
     This will start GTM-Proxy.  <option>-h</> option is the host name
     or IP address which GTM-Proxy listens to.   <option>-p</> option
     is the port number to listen to.   <option>-s</>
     and <option>-t</> are IP address or the host
     name and the port number of GTM as specified
     above.   <option>-i</> is the node number of GTM-Proxy beginning
     with 1.   <option>-n</> is the number of worker thread of
     GTM-Proxy.   Usually, 1 or 2 is advised.  Then <option>-D</>
     option is the working directory of the GTM-Proxy.
    </para>
    <para>
     Please note that you should start GTM-Proxy on all the servers
     you run Coordinator/Datanode.
    </para>
   </step>

   <step>
&xconly;
    <para>
     Now you can start Datanode on each server like:
<programlisting>
gaussdb --datanode -D /usr/local/pgsql/Datanode
</programlisting>
     This will start the Datanode.   <option>--datanode</>
     specifies <command>gaussdb</> to start as a
     Datanode. <option>-D</> specifies the data directory of the
     Datanode. You can specify other options of standalone <command>gaussdb</>.
    </para>
    <para>
     Please note that you should issue <command>gaussdb</> command at
     all the servers you're running Datanode.
    </para>
   </step>

   <para>
    Finally, you can start Coordinator like:
<programlisting>
gaussdb --coordinator -D /usr/local/pgsql/Coordinator
</programlisting>
    This will start the Coordinator.  <option>--coordinator</>
    specifies <command>gaussdb</> to start as a
    Coordinator.  <option>-D</> specifies the data directory of the
    Coordinator.  You can specify other options of standalone <command>gaussdb</>.
   </para>
   <para>
    Please note that you should issue <command>gaussdb</> command at
    all the servers you're running Coordinators.
   </para>


   <step>

























&xconly;
    <para>
     The previous step should have told you how to
     start up the whole database cluster. Do so now. The command should look
     something like:
<programlisting>
gaussdb --datanode -D /usr/local/pgsql/Datanode
</programlisting>
     This will start the Datanode in the foreground. To put the Datanode
     in the background use something like:
<programlisting>
nohup gaussdb --datanode -D /usr/local/pgsql/data \
    &lt;/dev/null &gt;&gt;server.log 2&gt;&amp;1 &lt;/dev/null &amp;
</programlisting>
     You can apply this to all the other components, GTM, GTM-Proxies,
     and Coordinators.
    </para>

    <para>
     To stop a Datanode running in the background you can type:
<programlisting>
kill `cat /usr/local/pgsql/Datanode/gaussmaster.pid`
</programlisting>
     You can apply this to stop a Coordinator too.
    </para>
    <para>
     To stop the GTM running in the background you can type
<programlisting>
kill `cat /usr/local/pgsql/gs_gtm/gs_gtm.pid`
</programlisting>
    </para>
    <para>
     To stop a GTM-Proxy running in the background, you can type
<programlisting>
kill `cat /usr/local/pgsql/gs_gtm-proxy/gtm_proxy.pid
</programlisting>
    </para>


   </step>

   <step>
    <para>
     Create a database:
<screen>
<userinput>createdb testdb</>
</screen>
     Then enter:






&xconly;
<screen>
<userinput>gsql -p 20004 testdb</>
</screen>


     Please do not forget to give the port number of one of the
     Coordinators.   Then you are connected to a Coordinator listening
     to the port you specified.





    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 id="install-whatnow">
  <title>What Now?</title>

  <para>
   <itemizedlist>
    <listitem>
     <para>




      The <productname>Postgres-XC</> distribution contains a

      comprehensive documentation set, which you should read sometime.
      After installation, the documentation can be accessed by
      pointing your browser to
      <filename>/usr/local/pgsql/doc/html/index.html</>, unless you
      changed the installation directories.
     </para>

     <para>
      The first few chapters of the main documentation are the Tutorial,
      which should be your first reading if you are completely new to
      <acronym>SQL</> databases.  If you are familiar with database
      concepts then you want to proceed with part on server
      administration, which contains information about how to set up
      the database server, database users, and authentication.
     </para>
    </listitem>




















    <listitem>
     <para>




      By default, <productname>Postgres-XC</> is configured to run on

      minimal hardware.  This allows it to start up with almost any
      hardware configuration. The default configuration is, however,
      not designed for optimum performance. To achieve optimum
      performance, several server parameters must be adjusted, the two
      most common being <varname>shared_buffers</varname> and
      <varname>work_mem</varname>.
      Other parameters mentioned in the documentation also affect
      performance.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </sect1>
]]>


 <sect1 id="supported-platforms">
  <title>Supported Platforms</title>






























&xconly;
  <para>
   <productname>Postgres-XC</> has been tested on Intel-based CPU mainly. Other CPU
    architectures may also work but are not currently being tested.
  </para>
















&xconly;
  <para>
   <productname>Postgres-XC</> can be expected to work on these operating systems:
   Linux (all recent distributions), FreeBSD and Mac OS X. Other Unix-like systems may
   also work but are not currently being tested.
  </para>

&xconly;

  <para>









   If you have installation problems on a platform that is known
   to be supported according to recent build farm results, please report
   it to <email>gaussdb-xc-bugs@lists.sourceforge.net</email>.  If you are interested
   in porting <productname>Postgres-XC</> to a new platform,
   <email>gaussdb-xc-developers@lists.sourceforge.net</email> is the appropriate place
   to discuss that.


  </para>
 </sect1>

 <sect1 id="installation-platform-notes">
  <title>Platform-specific Notes</title>

&xconly;
  <para>











   This section documents additional platform-specific issues
   regarding the installation and setup of Postgres-XC.  Be sure to
   read the installation instructions.

  </para>

  <para>
   Platforms that are not covered here have no known platform-specific
   installation issues.
  </para>
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 </sect1>

</chapter>
