// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remote_read.proto

#include "remote_read.pb.h"
#include "remote_read.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gauss {

static const char* RemoteRead_method_names[] = {
  "/gauss.RemoteRead/GetCU",
  "/gauss.RemoteRead/GetPage",
};

std::unique_ptr< RemoteRead::Stub> RemoteRead::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteRead::Stub> stub(new RemoteRead::Stub(channel));
  return stub;
}

RemoteRead::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCU_(RemoteRead_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPage_(RemoteRead_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RemoteRead::Stub::GetCU(::grpc::ClientContext* context, const ::gauss::CURequest& request, ::gauss::CUResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCU_, context, request, response);
}

void RemoteRead::Stub::experimental_async::GetCU(::grpc::ClientContext* context, const ::gauss::CURequest* request, ::gauss::CUResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCU_, context, request, response, std::move(f));
}

void RemoteRead::Stub::experimental_async::GetCU(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gauss::CUResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCU_, context, request, response, std::move(f));
}

void RemoteRead::Stub::experimental_async::GetCU(::grpc::ClientContext* context, const ::gauss::CURequest* request, ::gauss::CUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCU_, context, request, response, reactor);
}

void RemoteRead::Stub::experimental_async::GetCU(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gauss::CUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCU_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gauss::CUResponse>* RemoteRead::Stub::AsyncGetCURaw(::grpc::ClientContext* context, const ::gauss::CURequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gauss::CUResponse>::Create(channel_.get(), cq, rpcmethod_GetCU_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gauss::CUResponse>* RemoteRead::Stub::PrepareAsyncGetCURaw(::grpc::ClientContext* context, const ::gauss::CURequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gauss::CUResponse>::Create(channel_.get(), cq, rpcmethod_GetCU_, context, request, false);
}

::grpc::Status RemoteRead::Stub::GetPage(::grpc::ClientContext* context, const ::gauss::PageRequest& request, ::gauss::PageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPage_, context, request, response);
}

void RemoteRead::Stub::experimental_async::GetPage(::grpc::ClientContext* context, const ::gauss::PageRequest* request, ::gauss::PageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPage_, context, request, response, std::move(f));
}

void RemoteRead::Stub::experimental_async::GetPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gauss::PageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPage_, context, request, response, std::move(f));
}

void RemoteRead::Stub::experimental_async::GetPage(::grpc::ClientContext* context, const ::gauss::PageRequest* request, ::gauss::PageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPage_, context, request, response, reactor);
}

void RemoteRead::Stub::experimental_async::GetPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gauss::PageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gauss::PageResponse>* RemoteRead::Stub::AsyncGetPageRaw(::grpc::ClientContext* context, const ::gauss::PageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gauss::PageResponse>::Create(channel_.get(), cq, rpcmethod_GetPage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gauss::PageResponse>* RemoteRead::Stub::PrepareAsyncGetPageRaw(::grpc::ClientContext* context, const ::gauss::PageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gauss::PageResponse>::Create(channel_.get(), cq, rpcmethod_GetPage_, context, request, false);
}

RemoteRead::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteRead_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteRead::Service, ::gauss::CURequest, ::gauss::CUResponse>(
          std::mem_fn(&RemoteRead::Service::GetCU), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteRead_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteRead::Service, ::gauss::PageRequest, ::gauss::PageResponse>(
          std::mem_fn(&RemoteRead::Service::GetPage), this)));
}

RemoteRead::Service::~Service() {
}

::grpc::Status RemoteRead::Service::GetCU(::grpc::ServerContext* context, const ::gauss::CURequest* request, ::gauss::CUResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteRead::Service::GetPage(::grpc::ServerContext* context, const ::gauss::PageRequest* request, ::gauss::PageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gauss

