// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_read.proto

#include "remote_read.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gauss {
class CURequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CURequest> _instance;
} _CURequest_default_instance_;
class CUResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CUResponse> _instance;
} _CUResponse_default_instance_;
class PageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PageRequest> _instance;
} _PageRequest_default_instance_;
class PageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PageResponse> _instance;
} _PageResponse_default_instance_;
}  // namespace gauss
static void InitDefaultsscc_info_CURequest_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_CURequest_default_instance_;
    new (ptr) ::gauss::CURequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::CURequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CURequest_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CURequest_remote_5fread_2eproto}, {}};

static void InitDefaultsscc_info_CUResponse_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_CUResponse_default_instance_;
    new (ptr) ::gauss::CUResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::CUResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CUResponse_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CUResponse_remote_5fread_2eproto}, {}};

static void InitDefaultsscc_info_PageRequest_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_PageRequest_default_instance_;
    new (ptr) ::gauss::PageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::PageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageRequest_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PageRequest_remote_5fread_2eproto}, {}};

static void InitDefaultsscc_info_PageResponse_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_PageResponse_default_instance_;
    new (ptr) ::gauss::PageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::PageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageResponse_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PageResponse_remote_5fread_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_remote_5fread_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_remote_5fread_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_remote_5fread_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_remote_5fread_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, spcnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, dbnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, relnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, bucketnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, colid_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, offset_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, size_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, lsn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, return_code_),
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, size_),
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, cudata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, spcnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, dbnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, relnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, bucketnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, forknum_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, blocknum_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, blocksize_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, lsn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, return_code_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, size_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, pagedata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gauss::CURequest)},
  { 13, -1, sizeof(::gauss::CUResponse)},
  { 21, -1, sizeof(::gauss::PageRequest)},
  { 34, -1, sizeof(::gauss::PageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gauss::_CURequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gauss::_CUResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gauss::_PageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gauss::_PageResponse_default_instance_),
};

const char descriptor_table_protodef_remote_5fread_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021remote_read.proto\022\005gauss\"\213\001\n\tCURequest"
  "\022\017\n\007spcnode\030\001 \001(\r\022\016\n\006dbnode\030\002 \001(\r\022\017\n\007rel"
  "node\030\003 \001(\r\022\022\n\nbucketnode\030\004 \001(\005\022\r\n\005colid\030"
  "\005 \001(\005\022\016\n\006offset\030\006 \001(\004\022\014\n\004size\030\007 \001(\005\022\013\n\003l"
  "sn\030\010 \001(\004\"\?\n\nCUResponse\022\023\n\013return_code\030\001 "
  "\001(\005\022\014\n\004size\030\002 \001(\005\022\016\n\006cudata\030\003 \001(\014\"\226\001\n\013Pa"
  "geRequest\022\017\n\007spcnode\030\001 \001(\r\022\016\n\006dbnode\030\002 \001"
  "(\r\022\017\n\007relnode\030\003 \001(\r\022\022\n\nbucketnode\030\004 \001(\005\022"
  "\017\n\007forknum\030\005 \001(\005\022\020\n\010blocknum\030\006 \001(\r\022\021\n\tbl"
  "ocksize\030\007 \001(\r\022\013\n\003lsn\030\010 \001(\004\"C\n\014PageRespon"
  "se\022\023\n\013return_code\030\001 \001(\005\022\014\n\004size\030\002 \001(\005\022\020\n"
  "\010pagedata\030\003 \001(\0142r\n\nRemoteRead\022.\n\005GetCU\022\020"
  ".gauss.CURequest\032\021.gauss.CUResponse\"\000\0224\n"
  "\007GetPage\022\022.gauss.PageRequest\032\023.gauss.Pag"
  "eResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_remote_5fread_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_remote_5fread_2eproto_sccs[4] = {
  &scc_info_CURequest_remote_5fread_2eproto.base,
  &scc_info_CUResponse_remote_5fread_2eproto.base,
  &scc_info_PageRequest_remote_5fread_2eproto.base,
  &scc_info_PageResponse_remote_5fread_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_remote_5fread_2eproto_once;
static bool descriptor_table_remote_5fread_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_5fread_2eproto = {
  &descriptor_table_remote_5fread_2eproto_initialized, descriptor_table_protodef_remote_5fread_2eproto, "remote_read.proto", 579,
  &descriptor_table_remote_5fread_2eproto_once, descriptor_table_remote_5fread_2eproto_sccs, descriptor_table_remote_5fread_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_remote_5fread_2eproto::offsets,
  file_level_metadata_remote_5fread_2eproto, 4, file_level_enum_descriptors_remote_5fread_2eproto, file_level_service_descriptors_remote_5fread_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remote_5fread_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_remote_5fread_2eproto), true);
namespace gauss {

// ===================================================================

void CURequest::InitAsDefaultInstance() {
}
class CURequest::_Internal {
 public:
};

CURequest::CURequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.CURequest)
}
CURequest::CURequest(const CURequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spcnode_, &from.spcnode_,
    static_cast<size_t>(reinterpret_cast<char*>(&lsn_) -
    reinterpret_cast<char*>(&spcnode_)) + sizeof(lsn_));
  // @@protoc_insertion_point(copy_constructor:gauss.CURequest)
}

void CURequest::SharedCtor() {
  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lsn_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(lsn_));
}

CURequest::~CURequest() {
  // @@protoc_insertion_point(destructor:gauss.CURequest)
  SharedDtor();
}

void CURequest::SharedDtor() {
}

void CURequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CURequest& CURequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CURequest_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void CURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.CURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lsn_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(lsn_));
  _internal_metadata_.Clear();
}

const char* CURequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 spcnode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spcnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dbnode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dbnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 relnode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          relnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bucketnode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bucketnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 colid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          colid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CURequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.CURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spcnode(), target);
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dbnode(), target);
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relnode(), target);
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bucketnode(), target);
  }

  // int32 colid = 5;
  if (this->colid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_colid(), target);
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_offset(), target);
  }

  // int32 size = 7;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_size(), target);
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_lsn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.CURequest)
  return target;
}

size_t CURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.CURequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spcnode());
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dbnode());
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_relnode());
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bucketnode());
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // int32 colid = 5;
  if (this->colid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colid());
  }

  // int32 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CURequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.CURequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CURequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CURequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.CURequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.CURequest)
    MergeFrom(*source);
  }
}

void CURequest::MergeFrom(const CURequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.CURequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spcnode() != 0) {
    _internal_set_spcnode(from._internal_spcnode());
  }
  if (from.dbnode() != 0) {
    _internal_set_dbnode(from._internal_dbnode());
  }
  if (from.relnode() != 0) {
    _internal_set_relnode(from._internal_relnode());
  }
  if (from.bucketnode() != 0) {
    _internal_set_bucketnode(from._internal_bucketnode());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.colid() != 0) {
    _internal_set_colid(from._internal_colid());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
}

void CURequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.CURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CURequest::CopyFrom(const CURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.CURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CURequest::IsInitialized() const {
  return true;
}

void CURequest::InternalSwap(CURequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spcnode_, other->spcnode_);
  swap(dbnode_, other->dbnode_);
  swap(relnode_, other->relnode_);
  swap(bucketnode_, other->bucketnode_);
  swap(offset_, other->offset_);
  swap(colid_, other->colid_);
  swap(size_, other->size_);
  swap(lsn_, other->lsn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CURequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CUResponse::InitAsDefaultInstance() {
}
class CUResponse::_Internal {
 public:
};

CUResponse::CUResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.CUResponse)
}
CUResponse::CUResponse(const CUResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cudata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cudata().empty()) {
    cudata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cudata_);
  }
  ::memcpy(&return_code_, &from.return_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:gauss.CUResponse)
}

void CUResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CUResponse_remote_5fread_2eproto.base);
  cudata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
}

CUResponse::~CUResponse() {
  // @@protoc_insertion_point(destructor:gauss.CUResponse)
  SharedDtor();
}

void CUResponse::SharedDtor() {
  cudata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUResponse& CUResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CUResponse_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void CUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.CUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cudata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

const char* CUResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cudata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cudata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.CUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_return_code(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // bytes cudata = 3;
  if (this->cudata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cudata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.CUResponse)
  return target;
}

size_t CUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.CUResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cudata = 3;
  if (this->cudata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cudata());
  }

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_return_code());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.CUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CUResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.CUResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.CUResponse)
    MergeFrom(*source);
  }
}

void CUResponse::MergeFrom(const CUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.CUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cudata().size() > 0) {

    cudata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cudata_);
  }
  if (from.return_code() != 0) {
    _internal_set_return_code(from._internal_return_code());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void CUResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.CUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUResponse::CopyFrom(const CUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.CUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUResponse::IsInitialized() const {
  return true;
}

void CUResponse::InternalSwap(CUResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cudata_.Swap(&other->cudata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_code_, other->return_code_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PageRequest::InitAsDefaultInstance() {
}
class PageRequest::_Internal {
 public:
};

PageRequest::PageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.PageRequest)
}
PageRequest::PageRequest(const PageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spcnode_, &from.spcnode_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocksize_) -
    reinterpret_cast<char*>(&spcnode_)) + sizeof(blocksize_));
  // @@protoc_insertion_point(copy_constructor:gauss.PageRequest)
}

void PageRequest::SharedCtor() {
  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocksize_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(blocksize_));
}

PageRequest::~PageRequest() {
  // @@protoc_insertion_point(destructor:gauss.PageRequest)
  SharedDtor();
}

void PageRequest::SharedDtor() {
}

void PageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PageRequest& PageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PageRequest_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void PageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.PageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocksize_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(blocksize_));
  _internal_metadata_.Clear();
}

const char* PageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 spcnode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spcnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dbnode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dbnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 relnode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          relnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bucketnode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bucketnode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 forknum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          forknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blocknum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blocksize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.PageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spcnode(), target);
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dbnode(), target);
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relnode(), target);
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bucketnode(), target);
  }

  // int32 forknum = 5;
  if (this->forknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_forknum(), target);
  }

  // uint32 blocknum = 6;
  if (this->blocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_blocknum(), target);
  }

  // uint32 blocksize = 7;
  if (this->blocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_blocksize(), target);
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_lsn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.PageRequest)
  return target;
}

size_t PageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.PageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spcnode());
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dbnode());
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_relnode());
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bucketnode());
  }

  // int32 forknum = 5;
  if (this->forknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_forknum());
  }

  // uint32 blocknum = 6;
  if (this->blocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blocknum());
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  // uint32 blocksize = 7;
  if (this->blocksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blocksize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.PageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.PageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.PageRequest)
    MergeFrom(*source);
  }
}

void PageRequest::MergeFrom(const PageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.PageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spcnode() != 0) {
    _internal_set_spcnode(from._internal_spcnode());
  }
  if (from.dbnode() != 0) {
    _internal_set_dbnode(from._internal_dbnode());
  }
  if (from.relnode() != 0) {
    _internal_set_relnode(from._internal_relnode());
  }
  if (from.bucketnode() != 0) {
    _internal_set_bucketnode(from._internal_bucketnode());
  }
  if (from.forknum() != 0) {
    _internal_set_forknum(from._internal_forknum());
  }
  if (from.blocknum() != 0) {
    _internal_set_blocknum(from._internal_blocknum());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
  if (from.blocksize() != 0) {
    _internal_set_blocksize(from._internal_blocksize());
  }
}

void PageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.PageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageRequest::CopyFrom(const PageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.PageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageRequest::IsInitialized() const {
  return true;
}

void PageRequest::InternalSwap(PageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spcnode_, other->spcnode_);
  swap(dbnode_, other->dbnode_);
  swap(relnode_, other->relnode_);
  swap(bucketnode_, other->bucketnode_);
  swap(forknum_, other->forknum_);
  swap(blocknum_, other->blocknum_);
  swap(lsn_, other->lsn_);
  swap(blocksize_, other->blocksize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PageResponse::InitAsDefaultInstance() {
}
class PageResponse::_Internal {
 public:
};

PageResponse::PageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.PageResponse)
}
PageResponse::PageResponse(const PageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pagedata().empty()) {
    pagedata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagedata_);
  }
  ::memcpy(&return_code_, &from.return_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:gauss.PageResponse)
}

void PageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PageResponse_remote_5fread_2eproto.base);
  pagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
}

PageResponse::~PageResponse() {
  // @@protoc_insertion_point(destructor:gauss.PageResponse)
  SharedDtor();
}

void PageResponse::SharedDtor() {
  pagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PageResponse& PageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PageResponse_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void PageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.PageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pagedata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

const char* PageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pagedata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.PageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_return_code(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // bytes pagedata = 3;
  if (this->pagedata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pagedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.PageResponse)
  return target;
}

size_t PageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.PageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pagedata = 3;
  if (this->pagedata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pagedata());
  }

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_return_code());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.PageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.PageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.PageResponse)
    MergeFrom(*source);
  }
}

void PageResponse::MergeFrom(const PageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.PageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pagedata().size() > 0) {

    pagedata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagedata_);
  }
  if (from.return_code() != 0) {
    _internal_set_return_code(from._internal_return_code());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void PageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.PageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageResponse::CopyFrom(const PageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.PageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageResponse::IsInitialized() const {
  return true;
}

void PageResponse::InternalSwap(PageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pagedata_.Swap(&other->pagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_code_, other->return_code_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gauss
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gauss::CURequest* Arena::CreateMaybeMessage< ::gauss::CURequest >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::CURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gauss::CUResponse* Arena::CreateMaybeMessage< ::gauss::CUResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::CUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gauss::PageRequest* Arena::CreateMaybeMessage< ::gauss::PageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::PageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gauss::PageResponse* Arena::CreateMaybeMessage< ::gauss::PageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::PageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
