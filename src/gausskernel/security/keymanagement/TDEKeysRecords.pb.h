// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TDEKeysRecords.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TDEKeysRecords_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TDEKeysRecords_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TDEKeysRecords_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TDEKeysRecords_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TDEKeysRecords_2eproto;
class TDEKeysRecords;
class TDEKeysRecordsDefaultTypeInternal;
extern TDEKeysRecordsDefaultTypeInternal _TDEKeysRecords_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TDEKeysRecords* Arena::CreateMaybeMessage<::TDEKeysRecords>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TDEKeysRecords_DEK_STATUS : int {
  TDEKeysRecords_DEK_STATUS_ALIVED = 1,
  TDEKeysRecords_DEK_STATUS_DEAD = 0,
  TDEKeysRecords_DEK_STATUS_INVALID = -1
};
bool TDEKeysRecords_DEK_STATUS_IsValid(int value);
constexpr TDEKeysRecords_DEK_STATUS TDEKeysRecords_DEK_STATUS_DEK_STATUS_MIN = TDEKeysRecords_DEK_STATUS_INVALID;
constexpr TDEKeysRecords_DEK_STATUS TDEKeysRecords_DEK_STATUS_DEK_STATUS_MAX = TDEKeysRecords_DEK_STATUS_ALIVED;
constexpr int TDEKeysRecords_DEK_STATUS_DEK_STATUS_ARRAYSIZE = TDEKeysRecords_DEK_STATUS_DEK_STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDEKeysRecords_DEK_STATUS_descriptor();
template<typename T>
inline const std::string& TDEKeysRecords_DEK_STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TDEKeysRecords_DEK_STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TDEKeysRecords_DEK_STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TDEKeysRecords_DEK_STATUS_descriptor(), enum_t_value);
}
inline bool TDEKeysRecords_DEK_STATUS_Parse(
    const std::string& name, TDEKeysRecords_DEK_STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TDEKeysRecords_DEK_STATUS>(
    TDEKeysRecords_DEK_STATUS_descriptor(), name, value);
}
enum TDEKeysRecords_TDE_ALGO : int {
  TDEKeysRecords_TDE_ALGO_AES_CTR_128 = 1,
  TDEKeysRecords_TDE_ALGO_SM4_CTR_128 = 2
};
bool TDEKeysRecords_TDE_ALGO_IsValid(int value);
constexpr TDEKeysRecords_TDE_ALGO TDEKeysRecords_TDE_ALGO_TDE_ALGO_MIN = TDEKeysRecords_TDE_ALGO_AES_CTR_128;
constexpr TDEKeysRecords_TDE_ALGO TDEKeysRecords_TDE_ALGO_TDE_ALGO_MAX = TDEKeysRecords_TDE_ALGO_SM4_CTR_128;
constexpr int TDEKeysRecords_TDE_ALGO_TDE_ALGO_ARRAYSIZE = TDEKeysRecords_TDE_ALGO_TDE_ALGO_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDEKeysRecords_TDE_ALGO_descriptor();
template<typename T>
inline const std::string& TDEKeysRecords_TDE_ALGO_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TDEKeysRecords_TDE_ALGO>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TDEKeysRecords_TDE_ALGO_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TDEKeysRecords_TDE_ALGO_descriptor(), enum_t_value);
}
inline bool TDEKeysRecords_TDE_ALGO_Parse(
    const std::string& name, TDEKeysRecords_TDE_ALGO* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TDEKeysRecords_TDE_ALGO>(
    TDEKeysRecords_TDE_ALGO_descriptor(), name, value);
}
// ===================================================================

class TDEKeysRecords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDEKeysRecords) */ {
 public:
  TDEKeysRecords();
  virtual ~TDEKeysRecords();

  TDEKeysRecords(const TDEKeysRecords& from);
  TDEKeysRecords(TDEKeysRecords&& from) noexcept
    : TDEKeysRecords() {
    *this = ::std::move(from);
  }

  inline TDEKeysRecords& operator=(const TDEKeysRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDEKeysRecords& operator=(TDEKeysRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TDEKeysRecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TDEKeysRecords* internal_default_instance() {
    return reinterpret_cast<const TDEKeysRecords*>(
               &_TDEKeysRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TDEKeysRecords& a, TDEKeysRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(TDEKeysRecords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TDEKeysRecords* New() const final {
    return CreateMaybeMessage<TDEKeysRecords>(nullptr);
  }

  TDEKeysRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TDEKeysRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TDEKeysRecords& from);
  void MergeFrom(const TDEKeysRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDEKeysRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDEKeysRecords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TDEKeysRecords_2eproto);
    return ::descriptor_table_TDEKeysRecords_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TDEKeysRecords_DEK_STATUS DEK_STATUS;
  static constexpr DEK_STATUS ALIVED =
    TDEKeysRecords_DEK_STATUS_ALIVED;
  static constexpr DEK_STATUS DEAD =
    TDEKeysRecords_DEK_STATUS_DEAD;
  static constexpr DEK_STATUS INVALID =
    TDEKeysRecords_DEK_STATUS_INVALID;
  static inline bool DEK_STATUS_IsValid(int value) {
    return TDEKeysRecords_DEK_STATUS_IsValid(value);
  }
  static constexpr DEK_STATUS DEK_STATUS_MIN =
    TDEKeysRecords_DEK_STATUS_DEK_STATUS_MIN;
  static constexpr DEK_STATUS DEK_STATUS_MAX =
    TDEKeysRecords_DEK_STATUS_DEK_STATUS_MAX;
  static constexpr int DEK_STATUS_ARRAYSIZE =
    TDEKeysRecords_DEK_STATUS_DEK_STATUS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DEK_STATUS_descriptor() {
    return TDEKeysRecords_DEK_STATUS_descriptor();
  }
  template<typename T>
  static inline const std::string& DEK_STATUS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DEK_STATUS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DEK_STATUS_Name.");
    return TDEKeysRecords_DEK_STATUS_Name(enum_t_value);
  }
  static inline bool DEK_STATUS_Parse(const std::string& name,
      DEK_STATUS* value) {
    return TDEKeysRecords_DEK_STATUS_Parse(name, value);
  }

  typedef TDEKeysRecords_TDE_ALGO TDE_ALGO;
  static constexpr TDE_ALGO AES_CTR_128 =
    TDEKeysRecords_TDE_ALGO_AES_CTR_128;
  static constexpr TDE_ALGO SM4_CTR_128 =
    TDEKeysRecords_TDE_ALGO_SM4_CTR_128;
  static inline bool TDE_ALGO_IsValid(int value) {
    return TDEKeysRecords_TDE_ALGO_IsValid(value);
  }
  static constexpr TDE_ALGO TDE_ALGO_MIN =
    TDEKeysRecords_TDE_ALGO_TDE_ALGO_MIN;
  static constexpr TDE_ALGO TDE_ALGO_MAX =
    TDEKeysRecords_TDE_ALGO_TDE_ALGO_MAX;
  static constexpr int TDE_ALGO_ARRAYSIZE =
    TDEKeysRecords_TDE_ALGO_TDE_ALGO_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TDE_ALGO_descriptor() {
    return TDEKeysRecords_TDE_ALGO_descriptor();
  }
  template<typename T>
  static inline const std::string& TDE_ALGO_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TDE_ALGO>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TDE_ALGO_Name.");
    return TDEKeysRecords_TDE_ALGO_Name(enum_t_value);
  }
  static inline bool TDE_ALGO_Parse(const std::string& name,
      TDE_ALGO* value) {
    return TDEKeysRecords_TDE_ALGO_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDEKIVFieldNumber = 10,
    kTableIdFieldNumber = 1,
    kDatabaseIdFieldNumber = 2,
    kCEKNameFieldNumber = 4,
    kCEKVersionFieldNumber = 5,
    kCEKIVFieldNumber = 6,
    kEncryptedSampleStringFieldNumber = 7,
    kDEKCipherFieldNumber = 8,
    kDEKStatusFieldNumber = 3,
    kAlgoFieldNumber = 9,
  };
  // repeated fixed32 DEK_IV = 10;
  int dek_iv_size() const;
  private:
  int _internal_dek_iv_size() const;
  public:
  void clear_dek_iv();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dek_iv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dek_iv() const;
  void _internal_add_dek_iv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dek_iv();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dek_iv(int index) const;
  void set_dek_iv(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dek_iv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dek_iv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dek_iv();

  // required bytes table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const std::string& table_id() const;
  void set_table_id(const std::string& value);
  void set_table_id(std::string&& value);
  void set_table_id(const char* value);
  void set_table_id(const void* value, size_t size);
  std::string* mutable_table_id();
  std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // required bytes database_id = 2;
  bool has_database_id() const;
  private:
  bool _internal_has_database_id() const;
  public:
  void clear_database_id();
  const std::string& database_id() const;
  void set_database_id(const std::string& value);
  void set_database_id(std::string&& value);
  void set_database_id(const char* value);
  void set_database_id(const void* value, size_t size);
  std::string* mutable_database_id();
  std::string* release_database_id();
  void set_allocated_database_id(std::string* database_id);
  private:
  const std::string& _internal_database_id() const;
  void _internal_set_database_id(const std::string& value);
  std::string* _internal_mutable_database_id();
  public:

  // required bytes CEK_name = 4;
  bool has_cek_name() const;
  private:
  bool _internal_has_cek_name() const;
  public:
  void clear_cek_name();
  const std::string& cek_name() const;
  void set_cek_name(const std::string& value);
  void set_cek_name(std::string&& value);
  void set_cek_name(const char* value);
  void set_cek_name(const void* value, size_t size);
  std::string* mutable_cek_name();
  std::string* release_cek_name();
  void set_allocated_cek_name(std::string* cek_name);
  private:
  const std::string& _internal_cek_name() const;
  void _internal_set_cek_name(const std::string& value);
  std::string* _internal_mutable_cek_name();
  public:

  // required bytes CEK_version = 5;
  bool has_cek_version() const;
  private:
  bool _internal_has_cek_version() const;
  public:
  void clear_cek_version();
  const std::string& cek_version() const;
  void set_cek_version(const std::string& value);
  void set_cek_version(std::string&& value);
  void set_cek_version(const char* value);
  void set_cek_version(const void* value, size_t size);
  std::string* mutable_cek_version();
  std::string* release_cek_version();
  void set_allocated_cek_version(std::string* cek_version);
  private:
  const std::string& _internal_cek_version() const;
  void _internal_set_cek_version(const std::string& value);
  std::string* _internal_mutable_cek_version();
  public:

  // required bytes CEK_IV = 6;
  bool has_cek_iv() const;
  private:
  bool _internal_has_cek_iv() const;
  public:
  void clear_cek_iv();
  const std::string& cek_iv() const;
  void set_cek_iv(const std::string& value);
  void set_cek_iv(std::string&& value);
  void set_cek_iv(const char* value);
  void set_cek_iv(const void* value, size_t size);
  std::string* mutable_cek_iv();
  std::string* release_cek_iv();
  void set_allocated_cek_iv(std::string* cek_iv);
  private:
  const std::string& _internal_cek_iv() const;
  void _internal_set_cek_iv(const std::string& value);
  std::string* _internal_mutable_cek_iv();
  public:

  // required bytes encrypted_sample_string = 7;
  bool has_encrypted_sample_string() const;
  private:
  bool _internal_has_encrypted_sample_string() const;
  public:
  void clear_encrypted_sample_string();
  const std::string& encrypted_sample_string() const;
  void set_encrypted_sample_string(const std::string& value);
  void set_encrypted_sample_string(std::string&& value);
  void set_encrypted_sample_string(const char* value);
  void set_encrypted_sample_string(const void* value, size_t size);
  std::string* mutable_encrypted_sample_string();
  std::string* release_encrypted_sample_string();
  void set_allocated_encrypted_sample_string(std::string* encrypted_sample_string);
  private:
  const std::string& _internal_encrypted_sample_string() const;
  void _internal_set_encrypted_sample_string(const std::string& value);
  std::string* _internal_mutable_encrypted_sample_string();
  public:

  // required bytes DEK_cipher = 8;
  bool has_dek_cipher() const;
  private:
  bool _internal_has_dek_cipher() const;
  public:
  void clear_dek_cipher();
  const std::string& dek_cipher() const;
  void set_dek_cipher(const std::string& value);
  void set_dek_cipher(std::string&& value);
  void set_dek_cipher(const char* value);
  void set_dek_cipher(const void* value, size_t size);
  std::string* mutable_dek_cipher();
  std::string* release_dek_cipher();
  void set_allocated_dek_cipher(std::string* dek_cipher);
  private:
  const std::string& _internal_dek_cipher() const;
  void _internal_set_dek_cipher(const std::string& value);
  std::string* _internal_mutable_dek_cipher();
  public:

  // required .TDEKeysRecords.DEK_STATUS DEK_status = 3 [default = DEAD];
  bool has_dek_status() const;
  private:
  bool _internal_has_dek_status() const;
  public:
  void clear_dek_status();
  ::TDEKeysRecords_DEK_STATUS dek_status() const;
  void set_dek_status(::TDEKeysRecords_DEK_STATUS value);
  private:
  ::TDEKeysRecords_DEK_STATUS _internal_dek_status() const;
  void _internal_set_dek_status(::TDEKeysRecords_DEK_STATUS value);
  public:

  // required .TDEKeysRecords.TDE_ALGO Algo = 9 [default = AES_CTR_128];
  bool has_algo() const;
  private:
  bool _internal_has_algo() const;
  public:
  void clear_algo();
  ::TDEKeysRecords_TDE_ALGO algo() const;
  void set_algo(::TDEKeysRecords_TDE_ALGO value);
  private:
  ::TDEKeysRecords_TDE_ALGO _internal_algo() const;
  void _internal_set_algo(::TDEKeysRecords_TDE_ALGO value);
  public:

  // @@protoc_insertion_point(class_scope:TDEKeysRecords)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dek_iv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cek_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cek_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cek_iv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_sample_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dek_cipher_;
  int dek_status_;
  int algo_;
  friend struct ::TableStruct_TDEKeysRecords_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TDEKeysRecords

// required bytes table_id = 1;
inline bool TDEKeysRecords::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_table_id() const {
  return _internal_has_table_id();
}
inline void TDEKeysRecords::clear_table_id() {
  table_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TDEKeysRecords::table_id() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.table_id)
  return _internal_table_id();
}
inline void TDEKeysRecords::set_table_id(const std::string& value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.table_id)
}
inline std::string* TDEKeysRecords::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TDEKeysRecords.table_id)
  return _internal_mutable_table_id();
}
inline const std::string& TDEKeysRecords::_internal_table_id() const {
  return table_id_.GetNoArena();
}
inline void TDEKeysRecords::_internal_set_table_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  table_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TDEKeysRecords::set_table_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  table_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TDEKeysRecords.table_id)
}
inline void TDEKeysRecords::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  table_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TDEKeysRecords.table_id)
}
inline void TDEKeysRecords::set_table_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  table_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TDEKeysRecords.table_id)
}
inline std::string* TDEKeysRecords::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000001u;
  return table_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TDEKeysRecords::release_table_id() {
  // @@protoc_insertion_point(field_release:TDEKeysRecords.table_id)
  if (!_internal_has_table_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return table_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TDEKeysRecords::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_id);
  // @@protoc_insertion_point(field_set_allocated:TDEKeysRecords.table_id)
}

// required bytes database_id = 2;
inline bool TDEKeysRecords::_internal_has_database_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_database_id() const {
  return _internal_has_database_id();
}
inline void TDEKeysRecords::clear_database_id() {
  database_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TDEKeysRecords::database_id() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.database_id)
  return _internal_database_id();
}
inline void TDEKeysRecords::set_database_id(const std::string& value) {
  _internal_set_database_id(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.database_id)
}
inline std::string* TDEKeysRecords::mutable_database_id() {
  // @@protoc_insertion_point(field_mutable:TDEKeysRecords.database_id)
  return _internal_mutable_database_id();
}
inline const std::string& TDEKeysRecords::_internal_database_id() const {
  return database_id_.GetNoArena();
}
inline void TDEKeysRecords::_internal_set_database_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  database_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TDEKeysRecords::set_database_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  database_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TDEKeysRecords.database_id)
}
inline void TDEKeysRecords::set_database_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  database_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TDEKeysRecords.database_id)
}
inline void TDEKeysRecords::set_database_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  database_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TDEKeysRecords.database_id)
}
inline std::string* TDEKeysRecords::_internal_mutable_database_id() {
  _has_bits_[0] |= 0x00000002u;
  return database_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TDEKeysRecords::release_database_id() {
  // @@protoc_insertion_point(field_release:TDEKeysRecords.database_id)
  if (!_internal_has_database_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return database_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TDEKeysRecords::set_allocated_database_id(std::string* database_id) {
  if (database_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  database_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_id);
  // @@protoc_insertion_point(field_set_allocated:TDEKeysRecords.database_id)
}

// required .TDEKeysRecords.DEK_STATUS DEK_status = 3 [default = DEAD];
inline bool TDEKeysRecords::_internal_has_dek_status() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_dek_status() const {
  return _internal_has_dek_status();
}
inline void TDEKeysRecords::clear_dek_status() {
  dek_status_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::TDEKeysRecords_DEK_STATUS TDEKeysRecords::_internal_dek_status() const {
  return static_cast< ::TDEKeysRecords_DEK_STATUS >(dek_status_);
}
inline ::TDEKeysRecords_DEK_STATUS TDEKeysRecords::dek_status() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.DEK_status)
  return _internal_dek_status();
}
inline void TDEKeysRecords::_internal_set_dek_status(::TDEKeysRecords_DEK_STATUS value) {
  assert(::TDEKeysRecords_DEK_STATUS_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  dek_status_ = value;
}
inline void TDEKeysRecords::set_dek_status(::TDEKeysRecords_DEK_STATUS value) {
  _internal_set_dek_status(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.DEK_status)
}

// required bytes CEK_name = 4;
inline bool TDEKeysRecords::_internal_has_cek_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_cek_name() const {
  return _internal_has_cek_name();
}
inline void TDEKeysRecords::clear_cek_name() {
  cek_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TDEKeysRecords::cek_name() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.CEK_name)
  return _internal_cek_name();
}
inline void TDEKeysRecords::set_cek_name(const std::string& value) {
  _internal_set_cek_name(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.CEK_name)
}
inline std::string* TDEKeysRecords::mutable_cek_name() {
  // @@protoc_insertion_point(field_mutable:TDEKeysRecords.CEK_name)
  return _internal_mutable_cek_name();
}
inline const std::string& TDEKeysRecords::_internal_cek_name() const {
  return cek_name_.GetNoArena();
}
inline void TDEKeysRecords::_internal_set_cek_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cek_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TDEKeysRecords::set_cek_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cek_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TDEKeysRecords.CEK_name)
}
inline void TDEKeysRecords::set_cek_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cek_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TDEKeysRecords.CEK_name)
}
inline void TDEKeysRecords::set_cek_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cek_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TDEKeysRecords.CEK_name)
}
inline std::string* TDEKeysRecords::_internal_mutable_cek_name() {
  _has_bits_[0] |= 0x00000004u;
  return cek_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TDEKeysRecords::release_cek_name() {
  // @@protoc_insertion_point(field_release:TDEKeysRecords.CEK_name)
  if (!_internal_has_cek_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cek_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TDEKeysRecords::set_allocated_cek_name(std::string* cek_name) {
  if (cek_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cek_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cek_name);
  // @@protoc_insertion_point(field_set_allocated:TDEKeysRecords.CEK_name)
}

// required bytes CEK_version = 5;
inline bool TDEKeysRecords::_internal_has_cek_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_cek_version() const {
  return _internal_has_cek_version();
}
inline void TDEKeysRecords::clear_cek_version() {
  cek_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TDEKeysRecords::cek_version() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.CEK_version)
  return _internal_cek_version();
}
inline void TDEKeysRecords::set_cek_version(const std::string& value) {
  _internal_set_cek_version(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.CEK_version)
}
inline std::string* TDEKeysRecords::mutable_cek_version() {
  // @@protoc_insertion_point(field_mutable:TDEKeysRecords.CEK_version)
  return _internal_mutable_cek_version();
}
inline const std::string& TDEKeysRecords::_internal_cek_version() const {
  return cek_version_.GetNoArena();
}
inline void TDEKeysRecords::_internal_set_cek_version(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cek_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TDEKeysRecords::set_cek_version(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  cek_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TDEKeysRecords.CEK_version)
}
inline void TDEKeysRecords::set_cek_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  cek_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TDEKeysRecords.CEK_version)
}
inline void TDEKeysRecords::set_cek_version(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  cek_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TDEKeysRecords.CEK_version)
}
inline std::string* TDEKeysRecords::_internal_mutable_cek_version() {
  _has_bits_[0] |= 0x00000008u;
  return cek_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TDEKeysRecords::release_cek_version() {
  // @@protoc_insertion_point(field_release:TDEKeysRecords.CEK_version)
  if (!_internal_has_cek_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return cek_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TDEKeysRecords::set_allocated_cek_version(std::string* cek_version) {
  if (cek_version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cek_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cek_version);
  // @@protoc_insertion_point(field_set_allocated:TDEKeysRecords.CEK_version)
}

// required bytes CEK_IV = 6;
inline bool TDEKeysRecords::_internal_has_cek_iv() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_cek_iv() const {
  return _internal_has_cek_iv();
}
inline void TDEKeysRecords::clear_cek_iv() {
  cek_iv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TDEKeysRecords::cek_iv() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.CEK_IV)
  return _internal_cek_iv();
}
inline void TDEKeysRecords::set_cek_iv(const std::string& value) {
  _internal_set_cek_iv(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.CEK_IV)
}
inline std::string* TDEKeysRecords::mutable_cek_iv() {
  // @@protoc_insertion_point(field_mutable:TDEKeysRecords.CEK_IV)
  return _internal_mutable_cek_iv();
}
inline const std::string& TDEKeysRecords::_internal_cek_iv() const {
  return cek_iv_.GetNoArena();
}
inline void TDEKeysRecords::_internal_set_cek_iv(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  cek_iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TDEKeysRecords::set_cek_iv(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  cek_iv_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TDEKeysRecords.CEK_IV)
}
inline void TDEKeysRecords::set_cek_iv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  cek_iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TDEKeysRecords.CEK_IV)
}
inline void TDEKeysRecords::set_cek_iv(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  cek_iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TDEKeysRecords.CEK_IV)
}
inline std::string* TDEKeysRecords::_internal_mutable_cek_iv() {
  _has_bits_[0] |= 0x00000010u;
  return cek_iv_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TDEKeysRecords::release_cek_iv() {
  // @@protoc_insertion_point(field_release:TDEKeysRecords.CEK_IV)
  if (!_internal_has_cek_iv()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return cek_iv_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TDEKeysRecords::set_allocated_cek_iv(std::string* cek_iv) {
  if (cek_iv != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cek_iv_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cek_iv);
  // @@protoc_insertion_point(field_set_allocated:TDEKeysRecords.CEK_IV)
}

// required bytes encrypted_sample_string = 7;
inline bool TDEKeysRecords::_internal_has_encrypted_sample_string() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_encrypted_sample_string() const {
  return _internal_has_encrypted_sample_string();
}
inline void TDEKeysRecords::clear_encrypted_sample_string() {
  encrypted_sample_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TDEKeysRecords::encrypted_sample_string() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.encrypted_sample_string)
  return _internal_encrypted_sample_string();
}
inline void TDEKeysRecords::set_encrypted_sample_string(const std::string& value) {
  _internal_set_encrypted_sample_string(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.encrypted_sample_string)
}
inline std::string* TDEKeysRecords::mutable_encrypted_sample_string() {
  // @@protoc_insertion_point(field_mutable:TDEKeysRecords.encrypted_sample_string)
  return _internal_mutable_encrypted_sample_string();
}
inline const std::string& TDEKeysRecords::_internal_encrypted_sample_string() const {
  return encrypted_sample_string_.GetNoArena();
}
inline void TDEKeysRecords::_internal_set_encrypted_sample_string(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  encrypted_sample_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TDEKeysRecords::set_encrypted_sample_string(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  encrypted_sample_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TDEKeysRecords.encrypted_sample_string)
}
inline void TDEKeysRecords::set_encrypted_sample_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  encrypted_sample_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TDEKeysRecords.encrypted_sample_string)
}
inline void TDEKeysRecords::set_encrypted_sample_string(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  encrypted_sample_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TDEKeysRecords.encrypted_sample_string)
}
inline std::string* TDEKeysRecords::_internal_mutable_encrypted_sample_string() {
  _has_bits_[0] |= 0x00000020u;
  return encrypted_sample_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TDEKeysRecords::release_encrypted_sample_string() {
  // @@protoc_insertion_point(field_release:TDEKeysRecords.encrypted_sample_string)
  if (!_internal_has_encrypted_sample_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return encrypted_sample_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TDEKeysRecords::set_allocated_encrypted_sample_string(std::string* encrypted_sample_string) {
  if (encrypted_sample_string != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  encrypted_sample_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_sample_string);
  // @@protoc_insertion_point(field_set_allocated:TDEKeysRecords.encrypted_sample_string)
}

// required bytes DEK_cipher = 8;
inline bool TDEKeysRecords::_internal_has_dek_cipher() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_dek_cipher() const {
  return _internal_has_dek_cipher();
}
inline void TDEKeysRecords::clear_dek_cipher() {
  dek_cipher_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TDEKeysRecords::dek_cipher() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.DEK_cipher)
  return _internal_dek_cipher();
}
inline void TDEKeysRecords::set_dek_cipher(const std::string& value) {
  _internal_set_dek_cipher(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.DEK_cipher)
}
inline std::string* TDEKeysRecords::mutable_dek_cipher() {
  // @@protoc_insertion_point(field_mutable:TDEKeysRecords.DEK_cipher)
  return _internal_mutable_dek_cipher();
}
inline const std::string& TDEKeysRecords::_internal_dek_cipher() const {
  return dek_cipher_.GetNoArena();
}
inline void TDEKeysRecords::_internal_set_dek_cipher(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  dek_cipher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TDEKeysRecords::set_dek_cipher(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  dek_cipher_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TDEKeysRecords.DEK_cipher)
}
inline void TDEKeysRecords::set_dek_cipher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  dek_cipher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TDEKeysRecords.DEK_cipher)
}
inline void TDEKeysRecords::set_dek_cipher(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  dek_cipher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TDEKeysRecords.DEK_cipher)
}
inline std::string* TDEKeysRecords::_internal_mutable_dek_cipher() {
  _has_bits_[0] |= 0x00000040u;
  return dek_cipher_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TDEKeysRecords::release_dek_cipher() {
  // @@protoc_insertion_point(field_release:TDEKeysRecords.DEK_cipher)
  if (!_internal_has_dek_cipher()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return dek_cipher_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TDEKeysRecords::set_allocated_dek_cipher(std::string* dek_cipher) {
  if (dek_cipher != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dek_cipher_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dek_cipher);
  // @@protoc_insertion_point(field_set_allocated:TDEKeysRecords.DEK_cipher)
}

// repeated fixed32 DEK_IV = 10;
inline int TDEKeysRecords::_internal_dek_iv_size() const {
  return dek_iv_.size();
}
inline int TDEKeysRecords::dek_iv_size() const {
  return _internal_dek_iv_size();
}
inline void TDEKeysRecords::clear_dek_iv() {
  dek_iv_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TDEKeysRecords::_internal_dek_iv(int index) const {
  return dek_iv_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TDEKeysRecords::dek_iv(int index) const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.DEK_IV)
  return _internal_dek_iv(index);
}
inline void TDEKeysRecords::set_dek_iv(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dek_iv_.Set(index, value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.DEK_IV)
}
inline void TDEKeysRecords::_internal_add_dek_iv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dek_iv_.Add(value);
}
inline void TDEKeysRecords::add_dek_iv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dek_iv(value);
  // @@protoc_insertion_point(field_add:TDEKeysRecords.DEK_IV)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TDEKeysRecords::_internal_dek_iv() const {
  return dek_iv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TDEKeysRecords::dek_iv() const {
  // @@protoc_insertion_point(field_list:TDEKeysRecords.DEK_IV)
  return _internal_dek_iv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TDEKeysRecords::_internal_mutable_dek_iv() {
  return &dek_iv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TDEKeysRecords::mutable_dek_iv() {
  // @@protoc_insertion_point(field_mutable_list:TDEKeysRecords.DEK_IV)
  return _internal_mutable_dek_iv();
}

// required .TDEKeysRecords.TDE_ALGO Algo = 9 [default = AES_CTR_128];
inline bool TDEKeysRecords::_internal_has_algo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TDEKeysRecords::has_algo() const {
  return _internal_has_algo();
}
inline void TDEKeysRecords::clear_algo() {
  algo_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TDEKeysRecords_TDE_ALGO TDEKeysRecords::_internal_algo() const {
  return static_cast< ::TDEKeysRecords_TDE_ALGO >(algo_);
}
inline ::TDEKeysRecords_TDE_ALGO TDEKeysRecords::algo() const {
  // @@protoc_insertion_point(field_get:TDEKeysRecords.Algo)
  return _internal_algo();
}
inline void TDEKeysRecords::_internal_set_algo(::TDEKeysRecords_TDE_ALGO value) {
  assert(::TDEKeysRecords_TDE_ALGO_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  algo_ = value;
}
inline void TDEKeysRecords::set_algo(::TDEKeysRecords_TDE_ALGO value) {
  _internal_set_algo(value);
  // @@protoc_insertion_point(field_set:TDEKeysRecords.Algo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TDEKeysRecords_DEK_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TDEKeysRecords_DEK_STATUS>() {
  return ::TDEKeysRecords_DEK_STATUS_descriptor();
}
template <> struct is_proto_enum< ::TDEKeysRecords_TDE_ALGO> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TDEKeysRecords_TDE_ALGO>() {
  return ::TDEKeysRecords_TDE_ALGO_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TDEKeysRecords_2eproto
